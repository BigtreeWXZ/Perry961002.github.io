<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perry的博客</title>
  
  <subtitle>爱好数学和算法的码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-24T07:08:39.196Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Perry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo安装live2d插件</title>
    <link href="http://yoursite.com/2019/03/24/hexo-live2d/"/>
    <id>http://yoursite.com/2019/03/24/hexo-live2d/</id>
    <published>2019-03-24T06:34:30.000Z</published>
    <updated>2019-03-24T07:08:39.196Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/hexo/live.JPG" alt></p><blockquote><p>今天看见别人的博客页面上有一只动态、萌萌的小猫模型，在多方波折之后终于在自己的博客上也弄了一只，现在分享一下步骤！</p></blockquote><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>动态模型通过一个<code>Hexo</code>插件<code>live2d</code>来实现的，作者制作了10多个精美的模型，具体的展示可以看<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">作者的博客</a>。</p></li><li><p><a href="https://github.com/EYHN/hexo-helper-live2d/" target="_blank" rel="noopener">Github项目地址</a></p></li><li><p>我的博客上使用的是<code>hijiki</code>模型</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1.安装模块"></a>1.安装模块</h3><ul><li><p>首先我们需要安装<code>live2d</code>模块，我们需要在blog根目录下运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-安装模型"><a href="#2-安装模型" class="headerlink" title="2.安装模型"></a>2.安装模型</h3><ul><li><p>作者为我们提供了下面的多种模型，大家可以根据自己的喜好来选择，<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">具体效果展示</a>。</p><blockquote><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm install —save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install —save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul></blockquote></li><li><p>我们可以使用运行<code>npm install 模型名</code>的方式来安装对应的模型，我这里运行的是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3.配置_config.yml"></a>3.配置_config.yml</h3><ul><li><p>打开blog根目录下的<code>config.yml</code>文件，在最后追加下面的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  debug: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki  <span class="comment">#换成自己安装的模型</span></span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/imgs/hexo/live.JPG&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天看见别人的博客页面上有一只动态、萌萌的小猫模型，在多方波折之后终于在自己的博客上也弄了一只，现在分享一下步骤！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="live2d" scheme="http://yoursite.com/tags/live2d/"/>
    
  </entry>
  
  <entry>
    <title>SICP读书笔记--第3章《模块化、对象和状态》</title>
    <link href="http://yoursite.com/2019/03/23/sicp-third/"/>
    <id>http://yoursite.com/2019/03/23/sicp-third/</id>
    <published>2019-03-22T22:00:00.000Z</published>
    <updated>2019-03-22T19:28:34.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><ul><li><p>在第1章中我们知道了如何进行<strong>过程抽象</strong>，如何利用<strong>高阶过程</strong>达到更高一级的抽象。</p></li><li><p>在第2章中我们学会了<strong>数据抽象</strong>，知道了它的一般方法，利用它对系统各层次之间建立<strong>抽象屏障</strong>，利用<strong>闭包性质</strong>设计<strong>层次性结构</strong>数据，并学会了序列操作的一般性约定方法，深刻领会了<strong>数据导向</strong>的程序设计方法，并学会利用了<strong>消息传递</strong>进行程序分派。</p></li></ul><p>这两章的内容都可以利用<strong>代换模型</strong>进行解释，可是在自然界中的对象都不可避免地要考虑由时间带来的<strong>状态</strong>问题，本章就是通过引入对象、状态和赋值概念后完成对现实世界的模拟。</p></blockquote><ul><li>本章内容分布：<ul><li>3.1赋值和局部状态</li><li>3.2求值的环境模型</li><li>3.3用变动数据做模拟</li><li>3.4并发：时间是一个本质问题</li><li>3.5流</li></ul></li><li><a href="#jump">我的解题代码</a></li></ul><a id="more"></a><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><ul><li><p>本章中我们将看到一个强有力的、用于构造模拟真实物理系统的程序的设计策略：<strong><em>基于被模拟系统的结构去设计程序的结构</em></strong>。</p><ul><li>构造与物理系统中每一个对象相对应的<strong>计算对象</strong>。</li><li>对系统里的每种活动，在计算系统里定义对应的<strong>符号操作</strong>。</li></ul></li><li><p>两种组织策略：</p><ul><li>将注意力集中在<strong>对象</strong>上，考虑它们的行为可能随时间的变化而不断变化。</li><li>将注意力集中在流过系统的<strong>信息流</strong>上，看作信号处理系统，考虑对流的一系列动作如<strong>过滤</strong>、<strong>映射</strong>、<strong>组合</strong>等。</li></ul></li><li><p>新的计算模型：<strong><em>环境模型</em></strong>。</p></li></ul><h3 id="1-赋值和局部状态"><a href="#1-赋值和局部状态" class="headerlink" title="1.赋值和局部状态"></a>1.赋值和局部状态</h3><blockquote><ul><li>对象状态的描述：引入它的一些<strong>局部状态变量</strong>，维持有关这一对象的历史。</li><li>对象间的<strong>交互</strong>：建立起一个对象的状态变量与其他对象状态变量之间的联系。</li></ul></blockquote><h4 id="1-1赋值操作"><a href="#1-1赋值操作" class="headerlink" title="1.1赋值操作"></a>1.1赋值操作</h4><ul><li><p>使用了特殊形式<strong>set!</strong>，语法：</p><p><code>(set! &lt;name&gt; &lt;new-value&gt;)</code>，这里<code>&lt;name&gt;</code>将是一个符号，<code>&lt;new-value&gt;</code>是任何表达式。</p><blockquote><p><strong>set!</strong>将修改<code>&lt;name&gt;</code>，使它的值变成求值<code>&lt;new-value&gt;</code>的结果。</p></blockquote></li><li><p>使用了特殊形式<strong>begin</strong>，语法：</p><p><code>(begin &lt;exp1&gt; &lt;exp2&gt; ... &lt;expk&gt;)</code>，导致表达式<code>&lt;exp1&gt;</code>到<code>&lt;expk&gt;</code>按顺序求值，<code>&lt;expk&gt;</code>的值作为整个<code>begin</code>形式的值返回。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">make-withdraw</span> balance)</span><br><span class="line">    (<span class="name"><span class="builtin-name">lambda</span></span> (amount)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;=</span></span> balance amount)</span><br><span class="line">            (<span class="name"><span class="builtin-name">begin</span></span> (<span class="name"><span class="builtin-name">set!</span></span> balance (<span class="name"><span class="builtin-name">-</span></span> balance amount))</span><br><span class="line">                   balance)</span><br><span class="line">            <span class="string">"Insufficient funds"</span>)))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> W1 (<span class="name">make-withdraw</span> <span class="number">100</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> W2 (<span class="name">make-withdraw</span> <span class="number">100</span>))</span><br><span class="line">(<span class="name">W1</span> <span class="number">20</span>) </span><br><span class="line"><span class="comment">;==&gt; 80</span></span><br><span class="line">(<span class="name">W1</span> <span class="number">30</span>) </span><br><span class="line"><span class="comment">;==&gt; 70</span></span><br></pre></td></tr></table></figure><h4 id="1-2赋值带来的利益"><a href="#1-2赋值带来的利益" class="headerlink" title="1.2赋值带来的利益"></a>1.2赋值带来的利益</h4></li><li><p>一种<strong>维护模块化设计</strong>的强大技术：</p><p>将系统看作<code>一集带有局部状态的对象</code>，从一个复杂计算过程中一部分的角度看，其他部分都像是在随时间不断变化，<code>它们隐藏起自己的随时间变化的内部状态</code>。</p><h4 id="1-3赋值带来的代价"><a href="#1-3赋值带来的代价" class="headerlink" title="1.3赋值带来的代价"></a>1.3赋值带来的代价</h4></li><li><p><strong>破坏</strong>了前两章一直存在的一个特性：<code>引用透明性</code>，使确定能否通过等价地表达式代换去简化表达式变成了复杂的问题。</p></li><li>强迫人们去考虑赋值的<strong>顺序</strong>问题，保证每个语句所用的是被修改变量的正确版本。</li></ul><h3 id="2-求值的环境模型"><a href="#2-求值的环境模型" class="headerlink" title="2.求值的环境模型"></a>2.求值的环境模型</h3><blockquote><ul><li>一个<strong>环境</strong>就是<code>框架</code>的一个序列，每个框架是包含着一些<strong>约束</strong>的一个表格，这些约束将一些变量关联与对应的值。</li><li>每个框架包含着一个指针，指向这个框架的<strong>外围环境</strong>。</li><li>一个变量相对于某个特定环境的<strong>值</strong>，就是在这个环境中，包含着该变量的<strong>第一个框架</strong>里这个变量的约束值。</li></ul></blockquote><h4 id="2-1求值规则"><a href="#2-1求值规则" class="headerlink" title="2.1求值规则"></a>2.1求值规则</h4><p>过程应用的环境模型的两条规则：</p><ul><li><p>将一个过程对象应用于一集实际参数，将构造出一个新框架，其中将过程的形式参数约束到调用时的实际参数，而后在新的环境的上下文中求值过程体。</p></li><li><p>对于一个给定环境求值一个lambda表达式，将创建起一个过程对象，它是一个序对，由该lambda表达式的正文和一个指向环境的指针组成，这个指针指向创建这个过程对象的环境。</p></li></ul><p><img src="/imgs/sicp/envir.jpg" alt></p><h4 id="2-2内部定义"><a href="#2-2内部定义" class="headerlink" title="2.2内部定义"></a>2.2内部定义</h4><ul><li>以局部过程定义作为程序模块化的技术里的两个关键性质：<ul><li>局部过程的名字不会与包容它们的过程之外的名字相互干扰。</li><li>局部过程只需将包含着它们的过程的形参作为自由变量，就可以访问该过程的实际参数。</li></ul></li></ul><h3 id="3-用变动数据做模拟"><a href="#3-用变动数据做模拟" class="headerlink" title="3.用变动数据做模拟"></a>3.用变动数据做模拟</h3><h4 id="3-1变动的表"><a href="#3-1变动的表" class="headerlink" title="3.1变动的表"></a>3.1变动的表</h4><ul><li>通过两个操作<code>set-car!</code>和<code>set-cdr!</code>去分别改变一个序对的<code>car</code>和<code>cdr</code>指针的指向来实现变动的表。</li></ul><h4 id="3-2队列"><a href="#3-2队列" class="headerlink" title="3.2队列"></a>3.2队列</h4><ul><li><p>队列是一个<code>先进先出</code>的数据结构，这里主要是引入<code>首尾指针</code>的思想来加速对队列末端的访问。</p><p><img src="/imgs/sicp/queue.png" alt></p></li></ul><h4 id="3-3二维表格"><a href="#3-3二维表格" class="headerlink" title="3.3二维表格"></a>3.3二维表格</h4><ul><li><p>二维表格里的每个值由<strong>两个关键码</strong>的索引，我们将这个表格构造为一个一维表格，其中的每个关键码又标识了一个子表格。</p><p><img src="/imgs/sicp/2d-table.png" alt></p></li></ul><h4 id="3-4数字电路的模拟器"><a href="#3-4数字电路的模拟器" class="headerlink" title="3.4数字电路的模拟器"></a>3.4数字电路的模拟器</h4><ul><li><p>这是被称为<code>事件驱动的模拟</code>程序的一个代表，在这类系统里一些事件引发另一些在随后时间发生的事件，它们又会引发随后的事件，并如此继续下去。</p><p><img src="/imgs/sicp/half.png" alt></p></li></ul><h4 id="3-5约束的传播"><a href="#3-5约束的传播" class="headerlink" title="3.5约束的传播"></a>3.5约束的传播</h4><ul><li><p>通过构造<code>约束网络</code>组合各种约束，约束通过<code>连接器</code>连接起来。当某个连接器被给定了一个值时，它就会去唤醒所有与之关联的约束，通知它们自己有了新值，并如此继续下去。</p><p><img src="/imgs/sicp/yueshu.png" alt></p></li></ul><h3 id="4-并发：时间是一个本质的问题"><a href="#4-并发：时间是一个本质的问题" class="headerlink" title="4.并发：时间是一个本质的问题"></a>4.并发：时间是一个本质的问题</h3><h4 id="4-1并发系统中时间的性质"><a href="#4-1并发系统中时间的性质" class="headerlink" title="4.1并发系统中时间的性质"></a>4.1并发系统中时间的性质</h4><ul><li><p>复杂性原因：<strong>多个进程</strong>有可能<strong>共享同一个状态变量</strong>。</p></li><li><p>并发程序正确性的两种限制方式：</p><ul><li><p>一种严格的限制方式：修改任意共享状态变量的两个操作<strong>都不允许</strong>同时发生。</p></li><li><p>另一种不那么严格的方式：保证并发系统产生出的结果与各个进程按照某种方式顺序运行产生出的<strong>结果完全一样</strong>。</p></li></ul><p><img src="/imgs/sicp/bank.png" alt></p></li></ul><h4 id="4-2控制并发的机制"><a href="#4-2控制并发的机制" class="headerlink" title="4.2控制并发的机制"></a>4.2控制并发的机制</h4><ul><li><strong>串行化组</strong>：创建一些不同的过程集合，并且保证在每个时刻，在任何一个串行化集合里至多只有一个过程的一个执行。</li></ul><blockquote><p>从本质上看，在并发控制中，任何时间概念都必然与通信有内在的密切联系。有意思的是，时间与通信之间的这种联系也出现在相对论里，在那里的光速（可能用于同步事件的最快信号）是与时间和空间有关的基本常量。在处理时间和状态时，我们在计算模型领域所遭遇的复杂性，事实上，可能就是物理世界中最基本的复杂性的一种反映。</p></blockquote><h3 id="5-流"><a href="#5-流" class="headerlink" title="5.流"></a>5.流</h3><ul><li><p><strong>流</strong>是另一条对状态进行模拟的途径，它的核心是一种<code>数学函数</code>的思想：</p><p>我们将一个量$x$的随时间变化的行为，描述为一个时间的函数$x(t)$。如果我们关注的是每个时刻下的$x$，那么可以看作是一个变化着的量。如果我们关注值的整个时间史，那么就不需要强调其中的变化—函数$x(t)$没有改变。</p></li></ul><h4 id="5-1流的实现"><a href="#5-1流的实现" class="headerlink" title="5.1流的实现"></a>5.1流的实现</h4><ul><li><p>基本想法：做出一种安排，只是部分地构造出流的结构，并送给使用流地程序，如果还需要访问尚未构造出的部分，则会自动继续构造下去。</p></li><li><p>特殊形式<code>delay</code>：求值<code>(delay &lt;exp&gt;)</code>返回一个<strong>延时对象</strong>，可以看作是对在未来的某个时间求值<code>&lt;exp&gt;</code>的许诺。</p></li><li><p>过程<code>force</code>：以一个延时对象为参数，执行相应的求值工作。</p></li></ul><h4 id="5-2流计算模式的使用"><a href="#5-2流计算模式的使用" class="headerlink" title="5.2流计算模式的使用"></a>5.2流计算模式的使用</h4><ul><li>我们可以将整个的时间序列作为有关的目标，而不是去关注状态变量在各个时刻的值。这将使我们更方便地组合与比较来自不同时刻的状态的组合。</li></ul><p><strong>将迭代操作表示为流操作</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 求解一个数的平方</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">sqrt-stream</span> x)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> guesses</span><br><span class="line">    (<span class="name">cons-stream</span> <span class="number">1.0</span></span><br><span class="line">                 (<span class="name">stream-map</span> (<span class="name"><span class="builtin-name">lambda</span></span> (guess) (<span class="name">sqrt-improve</span> guess x))</span><br><span class="line">                             guesses)))</span><br></pre></td></tr></table></figure><p><strong>序对的无穷流</strong></p><ul><li><p>这里主要是生产序对$(i,j)$，并且$i&lt;=j$</p><p><img src="/imgs/sicp/pairs.png" alt></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">pairs</span> s t)</span><br><span class="line">  (<span class="name">cons-stream</span></span><br><span class="line">    (<span class="name"><span class="builtin-name">list</span></span> (<span class="name">stream-car</span> s) (<span class="name">stream-car</span> t))</span><br><span class="line">    (<span class="name">interleave</span></span><br><span class="line">      (<span class="name">stream-map</span> (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">list</span></span> (<span class="name">stream-car</span> s) x))</span><br><span class="line">                  (<span class="name">stream-cdr</span> t))</span><br><span class="line">      (<span class="name">pairs</span> (<span class="name">stream-cdr</span> s) (<span class="name">stream-cdr</span> t)))))</span><br></pre></td></tr></table></figure></li></ul><p><strong>将流作为信号</strong></p><ul><li><p>用流的元素表示为一个信号在顺序的一系列时间间隔上的值。</p><p><img src="/imgs/sicp/integral.png" alt></p></li></ul><h4 id="5-3函数式程序的模块化和对象的模块化"><a href="#5-3函数式程序的模块化和对象的模块化" class="headerlink" title="5.3函数式程序的模块化和对象的模块化"></a>5.3函数式程序的模块化和对象的模块化</h4><ul><li><p>本章一开始就提出了其目标，那就是构造一些计算模型，使其结构能够符合我们对于试图去模拟的真实世界的看法，有下面的两种方式：</p><blockquote><ul><li>将这一世界模拟为一集相互分离的、受时间约束的、具有状态的相互交流的对象。</li><li>将它模拟为单一的、无时间也无状态的统一体。</li></ul></blockquote></li></ul><h2 id="我的解题代码"><a href="#我的解题代码" class="headerlink" title="我的解题代码"></a>我的解题代码</h2><p><span id="jump"></span></p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.1-make-accumulator.scm" target="_blank" rel="noopener">3.1</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.2-make-monitored.scm" target="_blank" rel="noopener">3.2</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.3-make-account-pswd.scm" target="_blank" rel="noopener">3.3</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.4-make-account-call.scm" target="_blank" rel="noopener">3.4</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.5-estimate-integral.scm" target="_blank" rel="noopener">3.5</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.6-rand.scm" target="_blank" rel="noopener">3.6</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.7-make-joint.scm" target="_blank" rel="noopener">3.7</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.8-order-of-evaluation.scm" target="_blank" rel="noopener">3.8</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe-3.9-environmental-model/exe3.9.md" target="_blank" rel="noopener">3.9</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.10-frames-as-booth-for-local-state/exe3.10.md" target="_blank" rel="noopener">3.10</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.11-internal-definition/exe3.11.md" target="_blank" rel="noopener">3.11</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.12-append!/exe3.12.md" target="_blank" rel="noopener">3.12</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.13-make-cycle/exe3.13.md" target="_blank" rel="noopener">3.13</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.14-loop/exe3.14.md" target="_blank" rel="noopener">3.14</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.15-set-to-wow!/exe3.15.md" target="_blank" rel="noopener">3.15</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.16-cons/exe3.16.md" target="_blank" rel="noopener">3.16</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.17-count-pairs.scm" target="_blank" rel="noopener">3.17</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.18-have-cycle.scm" target="_blank" rel="noopener">3.18</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.19-have-cycle.scm" target="_blank" rel="noopener">3.19</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.20-cons/exe3.20.md" target="_blank" rel="noopener">3.20</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.21-print-queue.scm" target="_blank" rel="noopener">3.21</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.22-make-queue.scm" target="_blank" rel="noopener">3.22</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.23-deque.scm" target="_blank" rel="noopener">3.23</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.24-make-table.scm" target="_blank" rel="noopener">3.24</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.25-key-list.scm" target="_blank" rel="noopener">3.25</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.26-tree-table.scm" target="_blank" rel="noopener">3.26</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.27-memo-fib.scm" target="_blank" rel="noopener">3.27</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.28-or-gate.scm" target="_blank" rel="noopener">3.28</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.29-or-gate.scm" target="_blank" rel="noopener">3.29</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.30-ripple-carry-adder.scm" target="_blank" rel="noopener">3.30</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.31-accept-action-procedure!.md" target="_blank" rel="noopener">3.31</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.32-agenda.md" target="_blank" rel="noopener">3.32</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.33-averager.scm" target="_blank" rel="noopener">3.33</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.34-squarer.md" target="_blank" rel="noopener">3.34</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.35-squarer.scm" target="_blank" rel="noopener">3.35</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.36-set-value!/exe3.36.md" target="_blank" rel="noopener">3.36</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.37-new-c-f-c.scm" target="_blank" rel="noopener">3.37</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.38-balance.md" target="_blank" rel="noopener">3.38</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.39-serializer.md" target="_blank" rel="noopener">3.39</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.40.md" target="_blank" rel="noopener">3.40</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.41-ben.md" target="_blank" rel="noopener">3.41</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.42.md" target="_blank" rel="noopener">3.42</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.43/exe3.43.md" target="_blank" rel="noopener">3.43</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.44.md" target="_blank" rel="noopener">3.44</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.45.md" target="_blank" rel="noopener">3.45</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.46-test-and-set!/exe3.46.md" target="_blank" rel="noopener">3.46</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.47-make-semaphore.scm" target="_blank" rel="noopener">3.47</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.48-deadlock.scm" target="_blank" rel="noopener">3.48</a></td></tr><tr><td style="text-align:center">3.49</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.50-stream-map.scm" target="_blank" rel="noopener">3.50</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.51-show.scm" target="_blank" rel="noopener">3.51</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.52-stream.scm" target="_blank" rel="noopener">3.52</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.53-add-stream.md" target="_blank" rel="noopener">3.53</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.54-mul-stream.scm" target="_blank" rel="noopener">3.54</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.55-partial-sums.scm" target="_blank" rel="noopener">3.55</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.56-s.scm" target="_blank" rel="noopener">3.56</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.57-fibs.md" target="_blank" rel="noopener">3.57</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.58-expand.scm" target="_blank" rel="noopener">3.58</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.59-integrate-series.scm" target="_blank" rel="noopener">3.59</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.60-mul-series.scm" target="_blank" rel="noopener">3.60</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.61-reciprocal-series.scm" target="_blank" rel="noopener">3.61</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.62-div-series.scm" target="_blank" rel="noopener">3.62</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.63-sqrt-stream.md" target="_blank" rel="noopener">3.63</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.64-stream-limit.scm" target="_blank" rel="noopener">3.64</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.65-ln2-stream.scm" target="_blank" rel="noopener">3.65</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.66-pairs.md" target="_blank" rel="noopener">3.66</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.67-pairs.scm" target="_blank" rel="noopener">3.67</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.68-pairs.md" target="_blank" rel="noopener">3.68</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.69-triples.scm" target="_blank" rel="noopener">3.69</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.70-weighted-pairs.scm" target="_blank" rel="noopener">3.70</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.71-ramanujan.scm" target="_blank" rel="noopener">3.71</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.72-three-ways.scm" target="_blank" rel="noopener">3.72</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.73-RC.scm" target="_blank" rel="noopener">3.73</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.74-zero-crossings.scm" target="_blank" rel="noopener">3.74</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.75-make-zero-crossings.scm" target="_blank" rel="noopener">3.75</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.76-smooth.scm" target="_blank" rel="noopener">3.76</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.77-integral.scm" target="_blank" rel="noopener">3.77</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.78-solve-2nd.scm" target="_blank" rel="noopener">3.78</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.79-solve-2nd-generic.scm" target="_blank" rel="noopener">3.79</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.80-RLC.scm" target="_blank" rel="noopener">3.80</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.81-rand-generator.scm" target="_blank" rel="noopener">3.81</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap3/exercise/exe3.82-estimate-integral.scm" target="_blank" rel="noopener">3.82</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在第1章中我们知道了如何进行&lt;strong&gt;过程抽象&lt;/strong&gt;，如何利用&lt;strong&gt;高阶过程&lt;/strong&gt;达到更高一级的抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在第2章中我们学会了&lt;strong&gt;数据抽象&lt;/strong&gt;，知道了它的一般方法，利用它对系统各层次之间建立&lt;strong&gt;抽象屏障&lt;/strong&gt;，利用&lt;strong&gt;闭包性质&lt;/strong&gt;设计&lt;strong&gt;层次性结构&lt;/strong&gt;数据，并学会了序列操作的一般性约定方法，深刻领会了&lt;strong&gt;数据导向&lt;/strong&gt;的程序设计方法，并学会利用了&lt;strong&gt;消息传递&lt;/strong&gt;进行程序分派。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两章的内容都可以利用&lt;strong&gt;代换模型&lt;/strong&gt;进行解释，可是在自然界中的对象都不可避免地要考虑由时间带来的&lt;strong&gt;状态&lt;/strong&gt;问题，本章就是通过引入对象、状态和赋值概念后完成对现实世界的模拟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本章内容分布：&lt;ul&gt;
&lt;li&gt;3.1赋值和局部状态&lt;/li&gt;
&lt;li&gt;3.2求值的环境模型&lt;/li&gt;
&lt;li&gt;3.3用变动数据做模拟&lt;/li&gt;
&lt;li&gt;3.4并发：时间是一个本质问题&lt;/li&gt;
&lt;li&gt;3.5流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jump&quot;&gt;我的解题代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SICP" scheme="http://yoursite.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>遇到的Hexo插件问题集合</title>
    <link href="http://yoursite.com/2019/03/19/hexo-plugin/"/>
    <id>http://yoursite.com/2019/03/19/hexo-plugin/</id>
    <published>2019-03-18T21:20:41.000Z</published>
    <updated>2019-03-18T21:54:40.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从第一次接触Hexo到现在也写了几篇博客了，期间因为插件的问题头疼了好几次，耽误了不少时间，因此准备把自己遇到的几个问题写出来，来一次填坑。</p></blockquote><p>遇到的问题分别是<code>Tag标签搜索问题</code>、<code>Hexo部署问题</code>、<code>MathJax数学公式渲染问题</code>。</p><a id="more"></a><h2 id="1-Tags标签搜索问题"><a href="#1-Tags标签搜索问题" class="headerlink" title="1.Tags标签搜索问题"></a>1.Tags标签搜索问题</h2><p>在我们初次更换Yilia主题之后会发现所有文章功能里的Tag标签搜索功能无法使用，需要我们安装对应的插件，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure><p>并在根目录里的<code>_config.yml</code>文件里添加代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">    meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    posts:</span></span><br><span class="line"><span class="attr">      title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="2-Hexo部署问题"><a href="#2-Hexo部署问题" class="headerlink" title="2.Hexo部署问题"></a>2.Hexo部署问题</h2><p>当我们准备部署自己的博客，在运行<code>hexo d -g</code>命令时，可能会遇到报错<code>ERROR Deployer not found:</code>，说明我们缺失了<code>deployer</code>，需要进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="3-MathJax数学公式渲染问题"><a href="#3-MathJax数学公式渲染问题" class="headerlink" title="3.MathJax数学公式渲染问题"></a>3.MathJax数学公式渲染问题</h2><p>在之前的一篇博客中我需要书写一些数学公式，在MarkDown编辑器中我写了如下的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">0 &amp; \rightarrow \lambda f x.x \\</span><br><span class="line">1 &amp; \rightarrow \lambda f x.fx \\</span><br><span class="line">2 &amp; \rightarrow \lambda f x. f (f x) \\</span><br><span class="line">&amp; \vdots \\</span><br><span class="line">N &amp; \rightarrow \lambda f x. f^nx \\</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>并得到了如期的效果</p><p><img src="/imgs/hexo/math.JPG" alt></p><p>可是生成静态页面后换行符完全不起作用，检查之后发现原来的<code>hexo-renderer-marked</code>插件并不能解析<code>\\</code>符号导致出错，需要我们升级到<code>hexo-renderer-kramed</code>。</p><p>我们需要运行下面的两条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save  <span class="comment">#卸载之前的hexo-renderer-marked</span></span><br><span class="line">npm install hexo-renderer-kramed --save    <span class="comment">#重新安装新的</span></span><br></pre></td></tr></table></figure><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从第一次接触Hexo到现在也写了几篇博客了，期间因为插件的问题头疼了好几次，耽误了不少时间，因此准备把自己遇到的几个问题写出来，来一次填坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遇到的问题分别是&lt;code&gt;Tag标签搜索问题&lt;/code&gt;、&lt;code&gt;Hexo部署问题&lt;/code&gt;、&lt;code&gt;MathJax数学公式渲染问题&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Plugin" scheme="http://yoursite.com/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>SICP读书笔记--第2章《构造数据抽象》</title>
    <link href="http://yoursite.com/2019/03/19/sicp-second/"/>
    <id>http://yoursite.com/2019/03/19/sicp-second/</id>
    <published>2019-03-18T21:00:07.000Z</published>
    <updated>2019-03-19T04:25:46.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><p>在第1章中我们关注了计算过程，讨论了程序设计语言的一个关键思想—-过程抽象。它的重要意义可能在于：</p><ul><li><p>屏蔽计算的细节，将过程作为<strong>黑箱抽象</strong>，使用者只需要知道它的功能。</p></li><li><p>允许我们抽象出过程中的<strong>公共模式</strong>，允许我们对过程进行操作，形成<strong>高阶过程</strong>，达到更高一级的抽象。</p></li></ul><p>本章将讨论的是程序设计语言的另一个方面：数据抽象。</p></blockquote><ul><li>本章小节分布<ul><li>2.1数据抽象导引</li><li>2.2层次性数据和闭包性质</li><li>2.3符号数据</li><li>2.4抽象数据的多重表示</li><li>2.5带有通用型操作的系统</li></ul></li></ul><a id="more"></a><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><ul><li><strong>与第1章对应</strong>，<strong>本章将讨论程序设计语言的另一个关键方面</strong>：</li></ul><blockquote><p>讨论如何将数据对象组合起来，形成<strong>复合数据</strong>的方式。这样做是为了提升我们在程序设计时所位于的<strong>概念层次</strong>，提高设计的<strong>模块性</strong>，增强语言的表达能力。</p></blockquote><h3 id="1-数据抽象导引"><a href="#1-数据抽象导引" class="headerlink" title="1.数据抽象导引"></a>1.数据抽象导引</h3><ul><li><strong>数据抽象的基本思想</strong>：</li></ul><blockquote><p>设法构造出一些<strong>使用复合数据对象的程序</strong>，使它们就像在“抽象数据”上操作一样。</p></blockquote><ul><li>我们使用<strong>构造函数</strong>和<strong>选择函数</strong>在具体的表示之上实现抽象的数据。</li></ul><h4 id="1-1序对"><a href="#1-1序对" class="headerlink" title="1.1序对"></a>1.1序对</h4><p>我们使用<code>cons</code>将两个对象结合成一个<strong>对偶</strong>，形成一个复合数据对象，为了可以提取出<code>cons</code>里的两个对象，我们分别使用<code>car</code>和<code>cdr</code>去完成。后面我们会用序对构造更复杂的、被称为<strong>表</strong>的数据结构。</p><h4 id="1-2抽象屏障"><a href="#1-2抽象屏障" class="headerlink" title="1.2抽象屏障"></a>1.2抽象屏障</h4><p>复合数据的使用帮助我们提高了程序的模块性，因为它将程序中处理<strong>数据对象的表示</strong>的部分与处理<strong>数据对象的使用</strong>的部分<strong>相互隔离</strong>，数据抽象使我们在程序的不同部分之间建立起适当的<strong>抽象屏障</strong>。</p><p>值得注意的是，任一数据结构可以有多种方式将其表示为简单对象的组合，所以抽象屏障有下面的优点：</p><ul><li>使程序很容易进行维护和修改，数据具体表示的改动对整体程序不会产生很大的影响。</li><li>只有少数界面对数据的具体表示存在依赖，允许我们推迟确定具体表示方法的时间，而不会阻碍系统其他部分的工作进展。</li></ul><h4 id="1-3数据意味什么？"><a href="#1-3数据意味什么？" class="headerlink" title="1.3数据意味什么？"></a>1.3数据意味什么？</h4><p>数据就是一些简单的数字、字符？或者它们组合起来的稍微复杂的一些东西吗？这样的想法可能有点简单！</p><p>来看一个有点颠覆但又非常合理的定义：</p><blockquote><p>我们总可以将数据定义为一组适当的<strong>选择函数</strong>和<strong>构造函数</strong>，以及使这些过程变成合法表示而需要的<strong>一组特定条件</strong>。</p></blockquote><p>现在我们就可以使用过程来定义序对了：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name"><span class="builtin-name">cons</span></span> x y)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">dispatch</span> m)</span><br><span class="line">    (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">=</span></span> m <span class="number">0</span>) x)</span><br><span class="line">          ((<span class="name"><span class="builtin-name">=</span></span> m <span class="number">1</span>) y)</span><br><span class="line">          (<span class="name"><span class="builtin-name">else</span></span> (<span class="name">error</span> <span class="string">"Argument not 0 or 1 -- CONS"</span> m))))</span><br><span class="line">  dispatch)   <span class="comment">;返回的是一个接收单参数的判断选择过程</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name"><span class="builtin-name">car</span></span> z) (<span class="name">z</span> <span class="number">0</span>))  <span class="comment">;向过程z传递参数0</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name"><span class="builtin-name">cdr</span></span> z) (<span class="name">z</span> <span class="number">1</span>))  <span class="comment">;向过程z传递参数1</span></span><br></pre></td></tr></table></figure><p>上面的程序还是出现了<code>x</code>和<code>y</code>这样的具体数据，干脆把数字这种基本的东西也用过程定义吧！</p><p>Church就用了λ表达式定义了的自然数，并且满足自然数的形式化定义（<a href="https://en.wikipedia.org/wiki/Peano_axioms" target="_blank" rel="noopener">皮亚诺公理</a>）</p><script type="math/tex; mode=display">\begin{align}0 & \rightarrow \lambda f x.x \\1 & \rightarrow \lambda f x.fx \\2 & \rightarrow \lambda f x. f (f x) \\& \vdots \\N & \rightarrow \lambda f x. f^nx \\\end{align}</script><p>其中，$f^n$表示$f$函数连续迭代$n$次，即$f^n x= f (f ( \cdots  (f x) \cdots ))$  。代码实现可参考<a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.6-Church.scm" target="_blank" rel="noopener">练习2.6</a></p><h3 id="2-层次性数据和闭包性质"><a href="#2-层次性数据和闭包性质" class="headerlink" title="2.层次性数据和闭包性质"></a>2.层次性数据和闭包性质</h3><ul><li><p>某种组合数据对象的操作满足<strong>闭包性质</strong></p><blockquote><p>通过它组合起来的数据对象本身还可以通过同样的操作再进行组合。</p></blockquote></li><li><p>闭包性质使我们可以建立起<strong>层次性</strong>的结构。</p></li></ul><h4 id="2-1序列表示和表操作"><a href="#2-1序列表示和表操作" class="headerlink" title="2.1序列表示和表操作"></a>2.1序列表示和表操作</h4><ul><li><p>我们使用<code>(list &lt;a1&gt; &lt;a2&gt; ... &lt;an&gt;)</code>来定义表，它等价于一个序对的序列：</p><p><code>(cons &lt;a1&gt; (cons &lt;a2&gt; (cons ... (cons &lt;an&gt; &#39;()) ... )))</code></p></li><li><p>表操作：</p><ul><li><code>(list-ref items n)</code>取表的第n个元素</li><li><code>(length items)</code>取表的长度</li><li><code>(append list1 list2)</code>把<code>list2</code>接在<code>list1</code>后面</li></ul></li><li><p>表的映射</p><p><code>(map proc items)</code>对表里的每个元素执行<code>proc</code>操作</p></li></ul><h4 id="2-2层次性结构"><a href="#2-2层次性结构" class="headerlink" title="2.2层次性结构"></a>2.2层次性结构</h4><ul><li>一个序列的元素本身也是序列，应用这种递归的表示，我们可以表示出<strong>树</strong>—-一种层次性结构的数据。</li></ul><h4 id="2-3序列作为一种约定的界面"><a href="#2-3序列作为一种约定的界面" class="headerlink" title="2.3序列作为一种约定的界面"></a>2.3序列作为一种约定的界面</h4><ul><li><p>对于一些序列的操作我们总可以抽象为下面的一种模块化的约定界面(顺序可调整)：</p><p><img src="/imgs/sicp/jiem.jpg" alt></p><blockquote><ul><li>枚举每一个元素</li><li>过滤出满足条件的元素</li><li>对满足条件的元素进行操作</li><li>累积上面的结果</li></ul></blockquote></li></ul><h3 id="3-数据导向的程序设计"><a href="#3-数据导向的程序设计" class="headerlink" title="3.数据导向的程序设计"></a>3.数据导向的程序设计</h3><blockquote><p>为了维护程序的模块性，将介绍<strong>数据导向</strong>的程序设计技术，它允许我们孤立地设计每一种数据表示，而后用<strong>添加</strong>的方式将它们组合。</p></blockquote><p>下面我们辨析一下数据导向里的两种程序分派方式：</p><h4 id="3-1基于类型的分派（也称数据导向）"><a href="#3-1基于类型的分派（也称数据导向）" class="headerlink" title="3.1基于类型的分派（也称数据导向）"></a>3.1基于类型的分派（也称数据导向）</h4><ul><li><p>是一种基于类型进行分派的组织方式，其中让每个操作管理自己的分派。</p></li><li><p>从效果上来看，这种方式是将操作-类型表格按行分解，每个通用型过程表示表格中的一行。采用一批“智能操作”去基于数据类型进行分派。</p></li><li><p>如果新增类型，只需再增加一个程序包即可，不需要修改源代码。</p></li><li><p>如果新增操作，同样也不需要修改之前的代码，只需要增加相应的分发函数即可。</p></li></ul><p>数据导向可以很方便地通过包机制增加新类型和新的通用操作，因此无论是增加新类型还是增加新操作，这种策略都很适合。</p><h4 id="3-2基于操作名的分派（消息传递）"><a href="#3-2基于操作名的分派（消息传递）" class="headerlink" title="3.2基于操作名的分派（消息传递）"></a>3.2基于操作名的分派（消息传递）</h4><ul><li><p>这种方式是将操作-类型表格按列分解，采用一批“智能数据对象”去基于操作名进行分派。</p></li><li><p>如果这样做就需要做出一种安排，将每一个数据对象表示为一个过程。它以操作的名字作为输入，能够去执行指定的操作。</p></li><li><p>如果新增类型，只需再增加一个分发过程，原有代码不需要修改。</p></li><li><p>如果新增操作，则需要修改每个分发过程，把新增的操作添加上。</p></li></ul><p>消息传递将数据对象和数据对象所需的操作整合在一起，因此它可以很方便地增加新类型，但是这种策略不适合增加新操作，因为每次为某个数据对象增加新操作之后，这个数据对象已有的实例全部都要重新实例化才能使用新操作。</p><h2 id="三、本章习题解答"><a href="#三、本章习题解答" class="headerlink" title="三、本章习题解答"></a>三、本章习题解答</h2><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.1-better-make-rat.scm" target="_blank" rel="noopener">2.1</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.2-segment.scm" target="_blank" rel="noopener">2.2</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.3-rectangle.scm" target="_blank" rel="noopener">2.3</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.4-cons.scm" target="_blank" rel="noopener">2.4</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.5-cons-car-cdr.scm" target="_blank" rel="noopener">2.5</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.6-Church.scm" target="_blank" rel="noopener">2.6</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.7-make-interval.scm" target="_blank" rel="noopener">2.7</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.8-sub-interval.scm" target="_blank" rel="noopener">2.8</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.9-width-interval.scm" target="_blank" rel="noopener">2.9</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.10-div-better.scm" target="_blank" rel="noopener">2.10</a></td><td style="text-align:center">2.11</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.12-make-center-percent.scm" target="_blank" rel="noopener">2.12</a></td><td style="text-align:center">2.13</td><td style="text-align:center">2.14</td><td style="text-align:center">2.15</td><td style="text-align:center">2.16</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.17-last-pair.scm" target="_blank" rel="noopener">2.17</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.18-reverse.scm" target="_blank" rel="noopener">2.18</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.19-coin-values.scm" target="_blank" rel="noopener">2.19</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.20-same-parity.scm" target="_blank" rel="noopener">2.20</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.21-square-list.scm" target="_blank" rel="noopener">2.21</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.22-square-list-iter.scm" target="_blank" rel="noopener">2.22</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.23-for-each.scm" target="_blank" rel="noopener">2.23</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.24-tree.scm" target="_blank" rel="noopener">2.24</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.25-car-and%20cdr.scm" target="_blank" rel="noopener">2.25</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.26-list.scm" target="_blank" rel="noopener">2.26</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.27-deep-reverse.scm" target="_blank" rel="noopener">2.27</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.28-fringe.scm" target="_blank" rel="noopener">2.28</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.29-mobile.scm" target="_blank" rel="noopener">2.29</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.30-square-tree.scm" target="_blank" rel="noopener">2.30</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.31-tree-map.scm" target="_blank" rel="noopener">2.31</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.32-subsets.scm" target="_blank" rel="noopener">2.32</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.33-accumulate.scm" target="_blank" rel="noopener">2.33</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.34-horner-eval.scm" target="_blank" rel="noopener">2.34</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.35-count-leaves.scm" target="_blank" rel="noopener">2.35</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.36-accumulate-n.scm" target="_blank" rel="noopener">2.36</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.37-vector-matrix.scm" target="_blank" rel="noopener">2.37</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.38-fold-left-and-fold-right.scm" target="_blank" rel="noopener">2.38</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.39-reverse.scm" target="_blank" rel="noopener">2.39</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.40-unique-pairs.scm" target="_blank" rel="noopener">2.40</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.41-3pairs.scm" target="_blank" rel="noopener">2.41</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.42-queens.scm" target="_blank" rel="noopener">2.42</a></td><td style="text-align:center">2.43</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.44-up-split.scm" target="_blank" rel="noopener">2.44</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.45-split.scm" target="_blank" rel="noopener">2.45</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.46-vector.scm" target="_blank" rel="noopener">2.46</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.47-frame.scm" target="_blank" rel="noopener">2.47</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.48-segment.scm" target="_blank" rel="noopener">2.48</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.49-painter.scm" target="_blank" rel="noopener">2.49</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.50-flip-horiz.scm" target="_blank" rel="noopener">2.50</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.51-below.scm" target="_blank" rel="noopener">2.51</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.52-layered-design.scm" target="_blank" rel="noopener">2.52</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.53-quotation.scm" target="_blank" rel="noopener">2.53</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.54-equal.scm" target="_blank" rel="noopener">2.54</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.55-quote.scm" target="_blank" rel="noopener">2.55</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.56-exponentiation.scm" target="_blank" rel="noopener">2.56</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.57-new-sum-and-product.scm" target="_blank" rel="noopener">2.57</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.58-infix-form.scm" target="_blank" rel="noopener">2.58</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.59-union-set.scm" target="_blank" rel="noopener">2.59</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.60-repeatable-set.scm" target="_blank" rel="noopener">2.60</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.61-adjoin-set.scm" target="_blank" rel="noopener">2.61</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.62-union-set-of-sort.scm" target="_blank" rel="noopener">2.62</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.63-tree-to-list.scm" target="_blank" rel="noopener">2.63</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.64-list-to-tree.scm" target="_blank" rel="noopener">2.64</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.65-balance-BST.scm" target="_blank" rel="noopener">2.65</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.66-lookup.scm" target="_blank" rel="noopener">2.66</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.67-decode.scm" target="_blank" rel="noopener">2.67</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.68-encode.scm" target="_blank" rel="noopener">2.68</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.69-generate-huffman-tree.scm" target="_blank" rel="noopener">2.69</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.70-huffman-of-song.scm" target="_blank" rel="noopener">2.70</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.71-and-2.72.scm" target="_blank" rel="noopener">2.71</a></td><td style="text-align:center">2.72</td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.73-deriv.scm" target="_blank" rel="noopener">2.73</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.74-company.scm" target="_blank" rel="noopener">2.74</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.75-make-from-mag-ang.scm" target="_blank" rel="noopener">2.75</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.76.md" target="_blank" rel="noopener">2.76</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.77-magnitude.scm" target="_blank" rel="noopener">2.77</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.78-type-tag.scm" target="_blank" rel="noopener">2.78</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.79-equ.scm" target="_blank" rel="noopener">2.79</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.80-%3Dzero.scm" target="_blank" rel="noopener">2.80</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.81-same-type.scm" target="_blank" rel="noopener">2.81</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.82-apply-generic.scm" target="_blank" rel="noopener">2.82</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.83-raise.scm" target="_blank" rel="noopener">2.83</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.84-raise-apply-generic.scm" target="_blank" rel="noopener">2.84</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.85-drop.scm" target="_blank" rel="noopener">2.85</a></td><td style="text-align:center">2.86</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.87-%3Dzero.scm" target="_blank" rel="noopener">2.87</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.88-sub-poly.scm" target="_blank" rel="noopener">2.88</a></td><td style="text-align:center">2.89</td><td style="text-align:center">2.90</td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap2/exercise/exe2.91-div-poly.scm" target="_blank" rel="noopener">2.91</a></td><td style="text-align:center">2.92</td><td style="text-align:center">2.93</td><td style="text-align:center">2.94</td><td style="text-align:center">2.95</td><td style="text-align:center">2.96</td><td style="text-align:center">2.97</td><td style="text-align:center"></td></tr></tbody></table></div><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在第1章中我们关注了计算过程，讨论了程序设计语言的一个关键思想—-过程抽象。它的重要意义可能在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;屏蔽计算的细节，将过程作为&lt;strong&gt;黑箱抽象&lt;/strong&gt;，使用者只需要知道它的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;允许我们抽象出过程中的&lt;strong&gt;公共模式&lt;/strong&gt;，允许我们对过程进行操作，形成&lt;strong&gt;高阶过程&lt;/strong&gt;，达到更高一级的抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章将讨论的是程序设计语言的另一个方面：数据抽象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本章小节分布&lt;ul&gt;
&lt;li&gt;2.1数据抽象导引&lt;/li&gt;
&lt;li&gt;2.2层次性数据和闭包性质&lt;/li&gt;
&lt;li&gt;2.3符号数据&lt;/li&gt;
&lt;li&gt;2.4抽象数据的多重表示&lt;/li&gt;
&lt;li&gt;2.5带有通用型操作的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SICP" scheme="http://yoursite.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>SICP读书笔记--第1章《构造过程抽象》</title>
    <link href="http://yoursite.com/2019/03/18/sicp-first/"/>
    <id>http://yoursite.com/2019/03/18/sicp-first/</id>
    <published>2019-03-17T16:50:23.000Z</published>
    <updated>2019-03-24T12:09:56.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><p>读完了SICP的第四章，也完成了大部分的习题。是时候来写一点总结和分享一下自己的心得了，这篇博文主要的目的就是写一下对第1章《构造过程抽象》的总结，并且展示自己不成熟的解题代码，同各位爱好者进行交流，希望大家指出其中的不足！</p></blockquote><ul><li><p>第1章共有3小节内容，分别是：</p><ul><li><p>1.1程序设计的基本元素</p></li><li><p>1.2过程与它们所产生的计算</p></li><li><p>1.3用高阶函数做函数</p></li></ul></li></ul><a id="more"></a><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><h3 id="1-程序设计的基本元素"><a href="#1-程序设计的基本元素" class="headerlink" title="1.程序设计的基本元素"></a>1.程序设计的基本元素</h3><ul><li><p>最一开始，作者就为我们指出了每一种强有力的语言应该提供的<code>三种机制</code>：</p><blockquote><ul><li><p><strong>基本表达形式</strong>：语言里最简单的个体。</p></li><li><p><strong>组合的方法</strong>：允许我们从简单的东西出发构造出复杂的元素。</p></li><li><strong>抽象的方法</strong>：允许我们为复合对象命名，并将它们当做单元去操作。</li></ul></blockquote></li><li><p>接下来就是本书的又一个重要的概念—-<code>环境</code>，它同时也是一种简单而又强有力的<strong>抽象</strong>方式</p><ul><li><p><code>define</code>就是上面所说的抽象方法：允许我们用一个名字去引用一个组合运算的结果。</p><p>有了这个方法我们就可以用一个简单的名字去代替复杂的对象和程序，方便我们以后用它们创造更复杂的东西。</p></li><li>为了完成上面的功能，解释器维护了一种存储能力，它保持了有关的<strong>名字-值对偶的轨迹</strong>。这种存储就被称为<strong>环境</strong>（更精确地说是全局环境）。</li></ul><p>在我看来<code>define</code>就是一种<strong>受限的</strong>抽象手段，因为它强制了一种关联，其实就是<code>lambda</code>的一个<strong>语法糖衣</strong>而已。</p></li><li><p>接下来就是利用<code>define</code>去完成<strong>过程的定义</strong>：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">&lt;name&gt;</span> &lt;formal parameters&gt;) &lt;body&gt;)</span><br></pre></td></tr></table></figure><p><code>&lt;name&gt;</code>是一个符号，后面将作为这个过程在环境里的名字，<code>&lt;formal parameters&gt;</code>是一个形参列表，<code>&lt;body&gt;</code>叫过程体，由一系列的表达式（组合式）组成。</p></li><li><p>对于组合式的求值，解释器将按照下面的过程工作</p><ul><li>求值组合式的各个子表达式。</li><li>将作为最左子表达式（运算符）的值的那个过程应用于相应的实参，即子表达式的值。</li></ul><p>对于求值子表达式，有下面的规定</p><ul><li><p>数的值就是它们表示的值。</p></li><li><p>内部运算符的值就是对应的机器指令序列。</p></li><li><p>其他名字的值就是环境中这个名字关联的对象。</p></li></ul><p>仔细想想上面的几个小点，将发现这一求值过程是<strong>递归</strong>的，如果还不清楚的话，请想想<code>(* (+ 2 (* 4 6)) (+ 3 5 7))</code>的求值过程。</p></li><li><p>过程应用的过程与上面的类似：</p><blockquote><p>在将过程体中的每个形参用相应的实参取代之后，对这一过程体求值。</p></blockquote><p>这种计算过程称为过程应用的<strong>代换模型</strong>，我们需要注意下面的几点</p><ul><li>代换模型只给出了求值器求值过程的<strong>简单、一般的形式化描述</strong>。</li><li>代换模型只是为了帮助<strong>直观</strong>理解过程应用的行为。</li><li>代换模型不足以解释复杂的求值过程，这在引入的赋值和局部状态之后更加明显。</li></ul></li><li><p>对于第4点中，<code>求值子表达式</code>和<code>把过程应用于得到的实参</code>这两个的先后问题引出了下面的<code>应用序</code>、<code>正则序</code>的概念</p><ul><li><p><code>正则序</code>：<strong>完全展开而后规约</strong>。</p></li><li><p><code>应用序</code>：<strong>先求值参数而后应用</strong>。</p></li></ul><p>大部分解释器会采用应用序，但是<code>正则序</code>在后面引入<strong>惰性求值</strong>之后将发挥出巨大的威力。</p></li><li><p>再回到之前的过程定义，我们将考虑下面的几个概念</p><ul><li><p>形式参数<code>与具体名字的名字无关</code>，它只在过程定义的<code>局部作用域里有效</code>，被称为<strong>约束变量</strong>。</p></li><li><p>在过程定义的<code>内部</code>可以定义这个过程需要用到的一些子过程，同样满足于<code>局部作用域的限制</code>，这样的<code>嵌套定义</code>称为<strong>块结构</strong>。</p></li></ul></li></ul><h3 id="2-过程与它们所产生的计算"><a href="#2-过程与它们所产生的计算" class="headerlink" title="2.过程与它们所产生的计算"></a>2.过程与它们所产生的计算</h3><blockquote><p>一个过程就是一种模式，它描述了一个计算过程的局部演化方式。</p></blockquote><ul><li><p><strong>递归</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fac</span> n)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="builtin-name">*</span></span> n (<span class="name">fac</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure><p>我们来看一下上面定义的过程的计算过程</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">fac</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name">fac</span> <span class="number">4</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name">fac</span> <span class="number">3</span>)))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name">fac</span> <span class="number">2</span>))))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> (<span class="name">fac</span> <span class="number">1</span>)))))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">2</span> <span class="number">1</span>))))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> <span class="number">2</span>)))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">4</span> <span class="number">6</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> <span class="number">24</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p>代换模型为我们揭示了一种先逐步展开而后收缩的形状，<strong>展开阶段</strong>构造起一个<strong>推迟进行的操作</strong>形成的链条，<strong>收缩阶段</strong>表现为运算的<strong>实际执行</strong>，这样的计算过程称为<strong>递归计算过程</strong>。这种过程的特点就是用链条去保存中间计算的一些信息，以便收缩时可以回到正确的原点。</p></li><li><p><strong>迭代</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fac</span> n)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">iter</span> product counter max-count)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> counter max-count)</span><br><span class="line">        product</span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="builtin-name">*</span></span> counter product)</span><br><span class="line">              (<span class="name"><span class="builtin-name">+</span></span> counter <span class="number">1</span>)</span><br><span class="line">              max-count)))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span> <span class="number">1</span> n))</span><br></pre></td></tr></table></figure><p>我们来看一下上面定义的过程的计算过程</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">fac</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">24</span> <span class="number">5</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">iter</span> <span class="number">120</span> <span class="number">6</span> <span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p>我们看到这样的过程是用变量<code>product</code>、<code>counter</code>、<code>max-count</code>去保存轨迹，称这样的计算为<strong>迭代计算过程</strong>。它有下面的特点：</p><ul><li><p>其状态可以用<strong>固定数目的状态变量</strong>描述。</p></li><li><p>存在一套<strong>固定的规则</strong>，描述了计算过程从<strong>一个状态到下一状态</strong>时变量的更新方式。</p></li><li><p>存在一个<strong>结束检测</strong>，描述了计算过程的<strong>终止条件</strong>。</p></li></ul><p>在迭代计算的任何时间点，状态变量都提供了计算状态的一个<strong>完整描述</strong>，意味着我们可以轻易地在计算停止之后通过向解释器提供状态变量的值来唤醒它。</p></li></ul><h3 id="3-用高阶函数做抽象"><a href="#3-用高阶函数做抽象" class="headerlink" title="3.用高阶函数做抽象"></a>3.用高阶函数做抽象</h3><blockquote><p>程序语言的必然要求：能为公共的模式命名，建立抽象，而后直接在抽象的层次上工作。</p></blockquote><p>在Scheme中允许我们<strong>以过程作为参数</strong>，或者<strong>以过程作为返回值</strong>描述上面的模式，这类能操作过程的过程被称为<strong>高阶过程</strong>。</p><ul><li><p><strong>过程作为参数</strong></p><p>如上面所说的我们可以把一个公共模式提取出来，只考虑它的一般情况，而不是考虑一些具体的表达，建立一般的抽象。在这里我们的参数可能不再只是简单的变量，而可能是一些一般化的过程。</p><ul><li><p>回忆一下求和公式：</p><script type="math/tex; mode=display">\sum_{n=a}^bf(n)=f(a)+ \cdots +f(b)</script><p>看看这个公式的代码吧</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">sum</span> f a next b)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="builtin-name">+</span></span> (<span class="name">f</span> a)</span><br><span class="line">         (<span class="name">sum</span> f (<span class="name">next</span> a) next b))))</span><br></pre></td></tr></table></figure><p>这里的<code>f</code>就是公式里的$f$，只是一个一般化的形式描述，没有具体的定义，<code>next</code>描述的是变量怎么从一个状态到另一个状态，也没有具体的定义。</p></li></ul><p>可以看到将<strong>过程作为参数</strong>成功地帮助我们从一些具体的描述里解脱出来，开始可以用一个抽象描述一个<strong>更一般化的抽象</strong>。</p></li><li><p><strong>用lambda构造过程</strong></p><p>有时候我们没有必要将过程和一个名字绑定起来，那我们就可以使用<code>lambda</code>去定义这个过程，它不需要我们为过程提供名字</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">lambda</span></span> (&lt;formal-parameters&gt;) &lt;body&gt;)</span><br></pre></td></tr></table></figure></li><li><p><strong>用let创建局部变量</strong></p><p>一般形式：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">&lt;var1&gt;</span> &lt;exp1&gt;)</span><br><span class="line">      (<span class="name">&lt;var2&gt;</span> &lt;exp2&gt;)</span><br><span class="line">      :</span><br><span class="line">      :</span><br><span class="line">      (<span class="name">&lt;varn&gt;</span> &lt;expn&gt;))</span><br><span class="line">  &lt;body&gt;)</span><br></pre></td></tr></table></figure><p>它表示令<script type="math/tex"><var_i></script>分别具有值<script type="math/tex"><exp_i></script>，然后带入<body>中求值。<script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/hijiki.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></p></li><li><p><strong>过程作为返回值</strong></p><p>有时因为形参和过程的特殊性，最后得到的可能不是具体的值，而是一个中间的过程。</p><p>比如</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">average-damp</span> f)</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name">average</span> x (<span class="name">f</span> x))))</span><br></pre></td></tr></table></figure><p><code>average-damp</code>的形参是一个过程<code>f</code>，返回的是求<code>x</code>和<code>(f x)</code>平均值的过程。</p></li><li><p><strong>抽象和第一级过程</strong></p><blockquote><p>高阶过程的重要性，在于使我们能显式地用程序设计语言的要素去描述这些抽象，使我们能像操作其他计算元素一样操作它们。</p></blockquote><p>带有最少限制的元素称为具有<strong>第一级</strong>的状态，第一级元素具有的“特权”有：</p><blockquote><ul><li>可以用变量命名</li><li>可以提供给过程作为参数</li><li>可以由过程作为结果返回</li><li>可以包含在数据结构中</li></ul></blockquote><p>最后一点我们会在第2章时领略到，对于Scheme来说，它<strong>给了过程完全的第一级状态</strong>。</p><h2 id="三-我的解题代码"><a href="#三-我的解题代码" class="headerlink" title="三.我的解题代码"></a>三.我的解题代码</h2></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1.1</td><td style="text-align:center">1.2</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.3-sum_of_2bigger.scm" target="_blank" rel="noopener">1.3</a></td><td style="text-align:center">1.4</td><td style="text-align:center">1.5</td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.6-new-if.scm" target="_blank" rel="noopener">1.6</a></td><td style="text-align:center">1.7</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.8-subtriplicate.scm" target="_blank" rel="noopener">1.8</a></td><td style="text-align:center">1.9</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.10-Ackermann.scm" target="_blank" rel="noopener">1.10</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.11-recursion-and-iteration.scm" target="_blank" rel="noopener">1.11</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.12-Pascal.scm" target="_blank" rel="noopener">1.12</a></td><td style="text-align:center">1.13</td><td style="text-align:center">1.14</td><td style="text-align:center">1.15</td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.16-fast-expt.scm" target="_blank" rel="noopener">1.16</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.17-fast-multiplication.scm" target="_blank" rel="noopener">1.17</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.18-fast-mult-iter.scm" target="_blank" rel="noopener">1.18</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.18-fast-mult-iter.scm" target="_blank" rel="noopener">1.19</a></td><td style="text-align:center">1.20</td></tr><tr><td style="text-align:center">1.21</td><td style="text-align:center">1.22</td><td style="text-align:center">1.23</td><td style="text-align:center">1.24</td><td style="text-align:center">1.25</td></tr><tr><td style="text-align:center">1.26</td><td style="text-align:center">1.27</td><td style="text-align:center">1.28</td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.29-simpson.scm" target="_blank" rel="noopener">1.29</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.30-SumModal-iter.scm" target="_blank" rel="noopener">1.30</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.31-product.scm" target="_blank" rel="noopener">1.31</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.32-accumulate.scm" target="_blank" rel="noopener">1.32</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.33-filtered-accumulate.scm" target="_blank" rel="noopener">1.33</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.34-f-g.scm" target="_blank" rel="noopener">1.34</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.35-golden-ratio.scm" target="_blank" rel="noopener">1.35</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.36-fixed-point-display.scm" target="_blank" rel="noopener">1.36</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.37-cont-frac.scm" target="_blank" rel="noopener">1.37</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.38-calculate-e.scm" target="_blank" rel="noopener">1.38</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.39-tan.scm" target="_blank" rel="noopener">1.39</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.40-cubic.scm" target="_blank" rel="noopener">1.40</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.41-double.scm" target="_blank" rel="noopener">1.41</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.42-compose.scm" target="_blank" rel="noopener">1.42</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.43-repeated.scm" target="_blank" rel="noopener">1.43</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.44-smooth.scm" target="_blank" rel="noopener">1.44</a></td><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.45-average-damp-n.scm" target="_blank" rel="noopener">1.45</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/Perry961002/SICP/blob/master/Chap1/exercise/exe1.46-iterative-improve.scm" target="_blank" rel="noopener">1.46</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;读完了SICP的第四章，也完成了大部分的习题。是时候来写一点总结和分享一下自己的心得了，这篇博文主要的目的就是写一下对第1章《构造过程抽象》的总结，并且展示自己不成熟的解题代码，同各位爱好者进行交流，希望大家指出其中的不足！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第1章共有3小节内容，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.1程序设计的基本元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.2过程与它们所产生的计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.3用高阶函数做函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SICP" scheme="http://yoursite.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>环形链表问题的证明</title>
    <link href="http://yoursite.com/2019/03/15/list-cycle/"/>
    <id>http://yoursite.com/2019/03/15/list-cycle/</id>
    <published>2019-03-14T16:15:02.000Z</published>
    <updated>2019-03-24T12:07:42.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在<code>LeetCode</code>上有这样两道关于<strong>环形链表</strong>的题目：</p><ul><li><p>No.141 描述：给定一个链表，判断链表中是否有环。<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">题目链接</a></p></li><li><p>No.142 描述：给定一个链表，返回链表开始入环的第一个节点。<a href="给定一个链表，返回链表开始入环的第一个节点。">题目链接</a></p></li></ul><p>这篇文章主要做一下解题方法—-<strong>快慢指针法</strong>的正确性证明。</p><a id="more"></a><h2 id="二、证明"><a href="#二、证明" class="headerlink" title="二、证明"></a>二、证明</h2><h3 id="1-证明快慢指针在环中是可以恰好相遇的"><a href="#1-证明快慢指针在环中是可以恰好相遇的" class="headerlink" title="1.证明快慢指针在环中是可以恰好相遇的"></a>1.证明快慢指针在环中是可以恰好相遇的</h3><p><img src="/imgs/algorithm/list.JPG" alt></p><p>设链表的头结点为$x_0$，环的起始结点为$x_s$，环的结点个数为$l$。当我们从$x_0$开始遍历链表的话可以得到下面的一个无穷序列：</p><script type="math/tex; mode=display">x_0, x_1,\cdots,x_s,x_{s+1},\cdots,x_{s+l-1},x_s,\cdots</script><p>假设$j$是$l$的整数倍且是满足$j&gt;s$的<strong>最小</strong>的那一个，对于任意的正整数$k(k\geq2)$，考虑两个结点位置 <script type="math/tex">x_j</script> 和 <script type="math/tex">x_{k*j}</script> （即慢指针走到了<script type="math/tex">x_j</script>，快指针走到了<script type="math/tex">x_{k*j}</script>），容易知道的事实是：<script type="math/tex">x_j</script>肯定在环中。那么<script type="math/tex">x_{k*j}</script>也在环中，因为<script type="math/tex">k*j=j+(k-1)*j</script>，可以认为<script type="math/tex">x_{k*j}</script>是从<script type="math/tex">x_j</script>开始多走了$k-1$个$j$步，所以<script type="math/tex">x_j=x_{k*j}</script>。</p><p>综上，<strong>两个指针一定会恰好相遇</strong>！</p><p>那么为了以<strong>最快的速度</strong>让两个指针相遇，我们应该让$k​$尽可能小，所以$k​$取2。所以让<strong>慢指针走1步</strong>，而<strong>快指针走2步</strong>！</p><h3 id="2-解题代码"><a href="#2-解题代码" class="headerlink" title="2.解题代码"></a>2.解题代码</h3><ul><li>其他题目的代码(C++, Java, Python)，包括一些经典数据结构和算法的实现也放在了我的<a href="https://github.com/Perry961002/Algorithms-LeetCode" target="_blank" rel="noopener">GitHub</a>上。</li></ul><h4 id="2-1-第一题代码"><a href="#2-1-第一题代码" class="headerlink" title="2.1.第一题代码"></a>2.1.第一题代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = head;  <span class="comment">//慢指针</span></span><br><span class="line">        ListNode* fast = head;  <span class="comment">//快指针</span></span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="literal">NULL</span> &amp;&amp; fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;  <span class="comment">//快指针走两步</span></span><br><span class="line">            <span class="keyword">if</span>(slow == fast)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-2-第二题代码"><a href="#2-2-第二题代码" class="headerlink" title="2.2.第二题代码"></a>2.2.第二题代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                fast = head;</span><br><span class="line">                <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">                    fast = fast-&gt;next;</span><br><span class="line">                    slow = slow-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;LeetCode&lt;/code&gt;上有这样两道关于&lt;strong&gt;环形链表&lt;/strong&gt;的题目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No.141 描述：给定一个链表，判断链表中是否有环。&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No.142 描述：给定一个链表，返回链表开始入环的第一个节点。&lt;a href=&quot;给定一个链表，返回链表开始入环的第一个节点。&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章主要做一下解题方法—-&lt;strong&gt;快慢指针法&lt;/strong&gt;的正确性证明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>我的书单（一）</title>
    <link href="http://yoursite.com/2019/03/12/booklist1/"/>
    <id>http://yoursite.com/2019/03/12/booklist1/</id>
    <published>2019-03-12T04:55:19.000Z</published>
    <updated>2019-03-14T18:05:12.081Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>读书带给人的是精神上的富足，会让你在精神得到满足之余，有一种孤独感。</em></strong></p><blockquote><p>大学期间，从大三开始陆陆续续也读了一点书籍，好多也是因为别人的推荐才知道的，也很感激那些推荐者，所以今天也来推荐一下我读过的一些好书！这些书有的是读完的，有的正在读，但都是我觉得还不错的书。</p></blockquote><a id="more"></a><h2 id="一、数学类"><a href="#一、数学类" class="headerlink" title="一、数学类"></a>一、数学类</h2><blockquote><p>数学是自然科学的基础，计算机更是由数学家创造出来的，培养好的数学素养对以后的学习是非常有必要的！</p></blockquote><h3 id="1-代数-—-Artin"><a href="#1-代数-—-Artin" class="headerlink" title="1.代数 — Artin"></a>1.代数 — Artin</h3><p><img src="/imgs/booklist/math/algebra.JPG" alt></p><blockquote><p>这本书是由当代领袖型代数学家与代数儿何学家之一的Atrin写作的，是一本代数学的经典著作，既介绍了矩阵运算、群、向量空间、线性变换、对称等较为基本的内容，又介绍了环、模、域、伽罗瓦理论等较为高深的内容，对于提高数学理解能力、增强对代数的兴趣是非常有益处的。</p></blockquote><h3 id="2-组合数学-—-冯荣权、宋春伟"><a href="#2-组合数学-—-冯荣权、宋春伟" class="headerlink" title="2.组合数学 — 冯荣权、宋春伟"></a>2.组合数学 — 冯荣权、宋春伟</h3><p><img src="/imgs/booklist/math/zhsx.JPG" alt></p><blockquote><p>这本书出自北大数学系教授之手，注重对抽象概念和定理的理解，强调方法的运用以及组合数学在各个领域的应用。因为理论性比较高，所以初步读起来会觉得比较困难，但理解了之后会觉得非常有趣。</p></blockquote><h2 id="二、计算机类"><a href="#二、计算机类" class="headerlink" title="二、计算机类"></a>二、计算机类</h2><h3 id="1-计算机程序的构造和解释"><a href="#1-计算机程序的构造和解释" class="headerlink" title="1.计算机程序的构造和解释"></a>1.计算机程序的构造和解释</h3><p><img src="/imgs/booklist/cs/sicp.JPG" alt></p><blockquote><p>这本书是MIT盛行多年的一本教材，它不仅仅是在教授计算机技术，我觉得里面更多的计算机科学方面的知识，作者使用了简单的函数式语言Scheme带领读者初步探索了精彩绝伦的计算机科学理论的世界！个人觉得是目前读过最精彩的书！</p></blockquote><ul><li>前4章的习题解答我也放在了<a href="https://github.com/Perry961002/SICP" target="_blank" rel="noopener">GitHub</a>上。</li></ul><h3 id="2-算法导论"><a href="#2-算法导论" class="headerlink" title="2.算法导论"></a>2.算法导论</h3><p><img src="/imgs/booklist/cs/algorithm.JPG" alt></p><blockquote><p>不多说，这本书是学习算法的人都有读过的，里面的内容也是非常的丰富，想读懂里面的内容是需要一定的基础的，想读完它更是需要花费大量的时间的。</p></blockquote><ul><li>我的一些算法练习和本书里一些经典算法的实现代码放在了<a href="https://github.com/Perry961002/Algorithms-LeetCode" target="_blank" rel="noopener">这里</a>。</li></ul><h3 id="3-编程珠玑"><a href="#3-编程珠玑" class="headerlink" title="3.编程珠玑"></a>3.编程珠玑</h3><p><img src="/imgs/booklist/cs/pearls.JPG" alt></p><blockquote><p>在书中，作者选取许多具有典型意义的复杂编程和算法问题，生动描绘了历史上众大师们在探索解决方案中发生的轶事、走过的弯路和不断精益求精的历程，引导读者像真正的程序员和软件工程师那样富于创新性地思考，并透彻阐述和总结了许多独特而精妙的设计原则、思考和解决问题的方法以及实用程序设计技巧。解决方案的代码均以C/C++语言编写，不仅有趣，而且有很大的实战示范意义。每章后所附习题极具挑战性和启发性，书末给出了简洁的解答。</p></blockquote><h3 id="4-C-Primer"><a href="#4-C-Primer" class="headerlink" title="4.C++ Primer"></a>4.C++ Primer</h3><p><img src="./" alt></p><blockquote><p>这本是久负盛名的 C++经典教程，深入浅出地为我们讲解了C++11标准里的各种知识和原理，教会我们怎么进行高效的现代C++编程</p></blockquote><h3 id="5-Effective-C"><a href="#5-Effective-C" class="headerlink" title="5.Effective C++"></a>5.Effective C++</h3><p><img src="/imgs/booklist/cs/effective.JPG" alt></p><blockquote><p>这是C++领域的经典大作，与《C++ Primer》的广博不同，这本书只是列出了55个编程准则，但都是非常实用的经验准则，是一本短小精悍的“专家经验积累”</p></blockquote><h3 id="6-统计学习方法"><a href="#6-统计学习方法" class="headerlink" title="6.统计学习方法"></a>6.统计学习方法</h3><p><img src="/imgs/booklist/cs/tjxx.JPG" alt></p><blockquote><p>书中罗列了10个统计学习方法，并且书的厚度相比同类的其他书籍真的很少，适合入门学习。</p></blockquote><h3 id="7-机器学习"><a href="#7-机器学习" class="headerlink" title="7.机器学习"></a>7.机器学习</h3><p><img src="/imgs/booklist/cs/ml.JPG" alt></p><blockquote><p>周志华的经典之作，不做其他介绍。</p></blockquote><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;读书带给人的是精神上的富足，会让你在精神得到满足之余，有一种孤独感。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大学期间，从大三开始陆陆续续也读了一点书籍，好多也是因为别人的推荐才知道的，也很感激那些推荐者，所以今天也来推荐一下我读过的一些好书！这些书有的是读完的，有的正在读，但都是我觉得还不错的书。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="书单" scheme="http://yoursite.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="BookList" scheme="http://yoursite.com/tags/BookList/"/>
    
  </entry>
  
  <entry>
    <title>SICP的小练习--Scheme语言实现3个经典的排序算法</title>
    <link href="http://yoursite.com/2019/02/25/scheme-sort/"/>
    <id>http://yoursite.com/2019/02/25/scheme-sort/</id>
    <published>2019-02-25T08:09:54.000Z</published>
    <updated>2019-03-14T18:05:46.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><p>从去年11月份开始了《计算机程序的构造和解释》这本书的学习，开始接触了函数式。学习过程中也对编程有了新的理解，对递归这一程序设计技术也有了更深的掌握。其间为了自娱自乐用Scheme这一小众的函数式语言实现了3个经典排序算法，分别是快速排序、归并排序、堆排序。</p></blockquote><ul><li>目前我已经学习并完成了那本书的前三章的内容和习题，所有的代码也放在了<a href="https://github.com/Perry961002/SICP" target="_blank" rel="noopener">GitHub仓库</a>里，如果有对那本书感兴趣的朋友，可以一起讨论学习。</li></ul><a id="more"></a><h2 id="二、具体算法实现"><a href="#二、具体算法实现" class="headerlink" title="二、具体算法实现"></a>二、具体算法实现</h2><h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h3><h4 id="1-1-算法核心思想"><a href="#1-1-算法核心思想" class="headerlink" title="1.1.算法核心思想"></a>1.1.算法核心思想</h4><ul><li>每次选取第一个元素作为基准，并采用过滤器<code>filter</code>将剩余元素中小于等于基准的作为<code>small</code>部分、剩余元素中大于基准的作为<code>big</code>部分，然后对<code>small</code>和<code>big</code>部分进行快速排序，最后按<code>small-基准-big</code>的顺序组合成新的列表，直到列表中只有一个元素为止.</li></ul><p><img src="/imgs/sicp/quicksort.png" alt></p><h4 id="1-2-完整代码实现"><a href="#1-2-完整代码实现" class="headerlink" title="1.2.完整代码实现"></a>1.2.完整代码实现</h4><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">quicksort</span> L)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">null?</span></span> L)</span><br><span class="line">        '()</span><br><span class="line">        (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">small</span> (<span class="name">quicksort</span> (<span class="name">filter</span> (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">&lt;=</span></span> x (<span class="name"><span class="builtin-name">car</span></span> L)))</span><br><span class="line">                                        (<span class="name"><span class="builtin-name">cdr</span></span> L))))</span><br><span class="line">              (<span class="name">big</span> (<span class="name">quicksort</span> (<span class="name">filter</span> (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">&gt;</span></span> x (<span class="name"><span class="builtin-name">car</span></span> L)))</span><br><span class="line">                                      (<span class="name"><span class="builtin-name">cdr</span></span> L)))))</span><br><span class="line">            (<span class="name"><span class="builtin-name">append</span></span> small (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> L) big)))))</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/Perry961002/SICP/blob/master/little%20practice/quicksort.scm" target="_blank" rel="noopener">代码文件</a></li></ul><h3 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2.归并排序"></a>2.归并排序</h3><h4 id="2-1-算法核心思想"><a href="#2-1-算法核心思想" class="headerlink" title="2.1.算法核心思想"></a>2.1.算法核心思想</h4><ul><li><strong>合并两个列表L1、L2</strong><ul><li>如果<code>L1</code>、<code>L2</code>中有一个为空，则返回另一个.</li><li>否则分别取<code>L1</code>、<code>L2</code>的首元素<code>x1</code>、<code>x2</code><ul><li>如果<code>x1</code>小于等于<code>x2</code>，则将<code>x1</code>作为新列表的首元素，并继续合并<code>L1</code>的剩余部分和<code>L2</code>.</li><li>如果<code>x1</code>大于<code>x2</code>，则将<code>x2</code>作为新列表的首元素，并继续合并<code>L1</code>和<code>L2</code>的剩余部分.</li></ul></li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">merge</span> L1 L2)</span><br><span class="line">    (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> L1) L2)</span><br><span class="line">          ((<span class="name"><span class="builtin-name">null?</span></span> L2) L1)</span><br><span class="line">          (<span class="name"><span class="builtin-name">else</span></span></span><br><span class="line">            (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">x1</span> (<span class="name"><span class="builtin-name">car</span></span> L1)) (<span class="name">x2</span> (<span class="name"><span class="builtin-name">car</span></span> L2)))</span><br><span class="line">                (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&lt;=</span></span> x1 x2)</span><br><span class="line">                    (<span class="name"><span class="builtin-name">cons</span></span> x1 (<span class="name">merge</span> (<span class="name"><span class="builtin-name">cdr</span></span> L1) L2))</span><br><span class="line">                    (<span class="name"><span class="builtin-name">cons</span></span> x2 (<span class="name">merge</span> L1 (<span class="name"><span class="builtin-name">cdr</span></span> L2))))))))</span><br></pre></td></tr></table></figure><ul><li><strong>归并排序</strong><ul><li>每次选取列表的头两个元素进行合并然后舍弃，并将合并之后元素放置列表末尾，继续对新列表进行归并排序，直到列表中只有一个元素.</li></ul></li></ul><p><img src="/imgs/sicp/mergesort.png" alt></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">merge-sort</span> L)</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">transform</span> x)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">number?</span></span> x)</span><br><span class="line">            (<span class="name"><span class="builtin-name">list</span></span> x)</span><br><span class="line">            x))</span><br><span class="line">    (<span class="name"><span class="builtin-name">cond</span></span> ((<span class="name"><span class="builtin-name">null?</span></span> L) '())</span><br><span class="line">          ((<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">length</span></span> L) <span class="number">1</span>) (<span class="name"><span class="builtin-name">car</span></span> L))</span><br><span class="line">          (<span class="name"><span class="builtin-name">else</span></span></span><br><span class="line">            (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">l1</span> (<span class="name">transform</span> (<span class="name"><span class="builtin-name">car</span></span> L)))</span><br><span class="line">                  (<span class="name">l2</span> (<span class="name">transform</span> (<span class="name"><span class="builtin-name">cadr</span></span> L))))</span><br><span class="line">                (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">new</span> (<span class="name"><span class="builtin-name">list</span></span> (<span class="name">merge</span> l1 l2))))</span><br><span class="line">                    (<span class="name">merge-sort</span> (<span class="name"><span class="builtin-name">append</span></span> (<span class="name">cddr</span> L) new)))))))</span><br></pre></td></tr></table></figure><h4 id="2-2-完整代码实现"><a href="#2-2-完整代码实现" class="headerlink" title="2.2.完整代码实现"></a>2.2.完整代码实现</h4><ul><li><a href="https://github.com/Perry961002/SICP/blob/master/little%20practice/merge-sort.scm" target="_blank" rel="noopener">代码文件</a></li></ul><h3 id="3-推排序"><a href="#3-推排序" class="headerlink" title="3.推排序"></a>3.推排序</h3><h4 id="3-1-算法核心思想"><a href="#3-1-算法核心思想" class="headerlink" title="3.1.算法核心思想"></a>3.1.算法核心思想</h4><ul><li><p><strong>首先将数组映射为一棵完全二叉树</strong></p><p>规则：对于 <code>i</code> 下标位置的元素，它的<code>左孩子</code>下标为 <code>2*i+1</code>，<code>右孩子</code>下标为 <code>2*(i+1)</code>​.</p></li></ul><p><img src="/imgs/sicp/heapa.png" alt></p><ul><li><p><strong>维护一个以root下标为根，末尾下标为len的大根堆</strong></p><p>如果root的两个孩子有比它大的，则将root和那个最大元素交换位置，并对那个子树进行<code>递归</code>维护.</p></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">MaxHeapify</span> heap root len)</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">Left</span> i) (<span class="name"><span class="builtin-name">+</span></span> (<span class="name"><span class="builtin-name">*</span></span> i <span class="number">2</span>) <span class="number">1</span>))</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">Right</span> i) (<span class="name"><span class="builtin-name">*</span></span> (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>) <span class="number">2</span>))</span><br><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">left</span> (<span class="name">Left</span> root))</span><br><span class="line">          (<span class="name">right</span> (<span class="name">Right</span> root))</span><br><span class="line">          (<span class="name">largest</span> root))</span><br><span class="line">        (<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">            (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">&lt;=</span></span> left len)</span><br><span class="line">                     (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">vector-ref</span></span> heap left)</span><br><span class="line">                        (<span class="name"><span class="builtin-name">vector-ref</span></span> heap root)))</span><br><span class="line">                (<span class="name"><span class="builtin-name">set!</span></span> largest left))</span><br><span class="line">            (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">&lt;=</span></span> right len)</span><br><span class="line">                     (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">vector-ref</span></span> heap right)</span><br><span class="line">                        (<span class="name"><span class="builtin-name">vector-ref</span></span> heap largest)))</span><br><span class="line">                (<span class="name"><span class="builtin-name">set!</span></span> largest right))</span><br><span class="line">            (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> largest root))</span><br><span class="line">                (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">head</span> (<span class="name"><span class="builtin-name">vector-ref</span></span> heap root)))</span><br><span class="line">                    (<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">                        (<span class="name"><span class="builtin-name">vector-set!</span></span> heap root (<span class="name"><span class="builtin-name">vector-ref</span></span> heap largest))</span><br><span class="line">                        (<span class="name"><span class="builtin-name">vector-set!</span></span> heap largest head)</span><br><span class="line">                        (<span class="name">MaxHeapify</span> heap largest len)))))))</span><br></pre></td></tr></table></figure><ul><li><p><strong>初始化大根堆</strong></p><p>从堆中的<code>最后一个有孩子</code>的节点开始<code>从右向左</code>、<code>从下向上</code>，以每个节点为根<code>维护一个大根堆</code>.</p></li></ul><p><img src="/imgs/sicp/heapb.png" alt></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">BuildMaxHeap</span> heap)</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">build-iter</span> i)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;=</span></span> i <span class="number">0</span>)</span><br><span class="line">            (<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">                (<span class="name">MaxHeapify</span> heap i (<span class="name"><span class="builtin-name">-</span></span> (<span class="name"><span class="builtin-name">vector-length</span></span> heap) <span class="number">1</span>))</span><br><span class="line">                (<span class="name">build-iter</span> (<span class="name"><span class="builtin-name">-</span></span> i <span class="number">1</span>)))))</span><br><span class="line">    (<span class="name">build-iter</span> (<span class="name"><span class="builtin-name">-</span></span> (<span class="name">div</span> (<span class="name"><span class="builtin-name">vector-length</span></span> heap) <span class="number">2</span>) <span class="number">1</span>)))</span><br></pre></td></tr></table></figure><ul><li><p><strong>堆排序</strong></p><p>从初始的大根堆开始，每次将<code>0下标</code>位置和<code>len下标</code>位置的元素交换，并<code>len := len-1</code>，然后继续对0到<code>len</code>位置的元素进行堆排序，直到<code>len = 0</code>.</p></li></ul><p><img src="/imgs/sicp/heapc.png" alt></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">HeapSort</span> heap)</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">sort-iter</span> i)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;=</span></span> i <span class="number">1</span>)</span><br><span class="line">            (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name"><span class="builtin-name">max</span></span> (<span class="name"><span class="builtin-name">vector-ref</span></span> heap <span class="number">0</span>)))</span><br><span class="line">                (<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">                    (<span class="name"><span class="builtin-name">vector-set!</span></span> heap <span class="number">0</span> (<span class="name"><span class="builtin-name">vector-ref</span></span> heap i))</span><br><span class="line">                    (<span class="name"><span class="builtin-name">vector-set!</span></span> heap i max)</span><br><span class="line">                    (<span class="name">MaxHeapify</span> heap <span class="number">0</span> (<span class="name"><span class="builtin-name">-</span></span> i <span class="number">1</span>))</span><br><span class="line">                    (<span class="name">sort-iter</span> (<span class="name"><span class="builtin-name">-</span></span> i <span class="number">1</span>))))))</span><br><span class="line">    (<span class="name">BuildMaxHeap</span> heap)</span><br><span class="line">    (<span class="name">sort-iter</span> (<span class="name"><span class="builtin-name">-</span></span> (<span class="name"><span class="builtin-name">vector-length</span></span> heap) <span class="number">1</span>))</span><br><span class="line">    heap)</span><br></pre></td></tr></table></figure><h4 id="3-2-完整代码实现"><a href="#3-2-完整代码实现" class="headerlink" title="3.2.完整代码实现"></a>3.2.完整代码实现</h4><ul><li><a href="https://github.com/Perry961002/SICP/blob/master/little%20practice/HeapSort.scm" target="_blank" rel="noopener">代码文件</a></li></ul><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从去年11月份开始了《计算机程序的构造和解释》这本书的学习，开始接触了函数式。学习过程中也对编程有了新的理解，对递归这一程序设计技术也有了更深的掌握。其间为了自娱自乐用Scheme这一小众的函数式语言实现了3个经典排序算法，分别是快速排序、归并排序、堆排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;目前我已经学习并完成了那本书的前三章的内容和习题，所有的代码也放在了&lt;a href=&quot;https://github.com/Perry961002/SICP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub仓库&lt;/a&gt;里，如果有对那本书感兴趣的朋友，可以一起讨论学习。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Scheme" scheme="http://yoursite.com/tags/Scheme/"/>
    
      <category term="函数式" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
      <category term="SICP" scheme="http://yoursite.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>利用Github和Hexo搭建Yilia主题的博客</title>
    <link href="http://yoursite.com/2019/02/21/hexo-yilia/"/>
    <id>http://yoursite.com/2019/02/21/hexo-yilia/</id>
    <published>2019-02-21T13:21:14.000Z</published>
    <updated>2019-03-17T10:57:31.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><p>前面几天时间利用Github和Hexo搭建Yilia主题的博客，过程中也踩了很多的坑，现在也到了填坑的时候了。</p><p>废话不多说，现在正式开始教程吧。</p></blockquote><a id="more"></a><h3 id="1-基本软件安装"><a href="#1-基本软件安装" class="headerlink" title="1.基本软件安装"></a>1.基本软件安装</h3><ul><li><p>首先我们需要从<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js官网</a>下载并安装这个软件。</p><p>安装成功之后我们在cmd窗口中输入命令：<code>node --version</code>，如果可以得到相对应的版本号则说明安装成功，否则请将安装目录添加到PATH环境变量中。</p></li><li><p>另外我们还需要安装Git，并且还需要配置与Github的SSH Key，需要的话可以参考我的上一篇<a href="https://perry96.com/2019/02/21/git-github/" target="_blank" rel="noopener">文章</a>。</p></li></ul><h3 id="2-创建Github仓库"><a href="#2-创建Github仓库" class="headerlink" title="2.创建Github仓库"></a>2.创建Github仓库</h3><ul><li><p>登录GitHub后我们新建一个名为<code>userName.github.io</code>的仓库，<code>userName</code>就是你账户的名字。</p><p>建好之后打开这个仓库的<code>Settings</code>页面，在<code>GitHub Pages</code>我们可以看到类似于这样的显示：</p><p><img src="/imgs/hexo/gitpage.JPG" alt></p><p>这里绿色区域显示的网址就是我们博客的网址，因为这个网址有点长，资金允许的话我们可以将它绑定到自己申请的域名，这将在后面进行介绍。</p></li></ul><h2 id="二、Hexo的安装和一些基本命令、配置"><a href="#二、Hexo的安装和一些基本命令、配置" class="headerlink" title="二、Hexo的安装和一些基本命令、配置"></a>二、Hexo的安装和一些基本命令、配置</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><ul><li><p>打开cmd窗口，运行命令：<code>npm install -g hexo</code>进行安装。</p></li><li><p>初始化Hexo：新建一个名为<code>blog</code>的文件夹，在<code>PowerShell</code>窗口中运行命令<code>hexo init</code>。</p><p>重新打开文件夹之后我们发现多出了这样一些文件</p><p><img src="/imgs/hexo/hexo.JPG" alt></p><ul><li><p>source文件夹：这里存放的是博客所有的资源文件，书写文章的Markdown文件存放在_posts子文件夹中，文章的图片资料可以新建imgs文件夹并存放。</p></li><li><p>themes文件夹：这里存放的是博客的主题文件，其中的<code>landspace</code>是默认的主题文件，之后我们更换的<code>Yilia</code>主题文件也将存放在这里。</p></li><li><p>_config.yml文件：这是博客的一些基本配置记录，我们后面将对它进行更改。</p></li></ul></li></ul><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><p>打开<code>_config.yml</code>文件进行配置</p><ul><li><p>基本信息展示：</p><p><img src="/imgs/hexo/site.JPG" alt></p></li><li><p>部署方式配置</p><p><img src="/imgs/hexo/deploy.JPG" alt></p></li></ul><p>关于头像和站点图标的更换将在更换主题之后进行。</p><h3 id="3-基本命令"><a href="#3-基本命令" class="headerlink" title="3.基本命令"></a>3.基本命令</h3><ul><li><p>生成静态页面：<code>hexo g</code>。</p></li><li><p>启动本地服务器：<code>hexo s</code>。</p><ul><li><p>默认的端口号是<code>4000</code>，如果冲突的话可以通过命令<code>hexo s -p5000</code>更换指定的端口号。</p></li><li><p>之后我们就可以在浏览器中访问<code>http://localhost:4000</code>查看自己的博客情况。</p></li></ul></li><li><p>新建文章：运行命令<code>hexo new &quot;xxxx&quot;</code>，在<code>source\_posts</code>文件夹生成新的Markdown文件，后面就可以在这个文件上完成自己的文章。</p></li><li><p>部署到GitHub：在搭建完博客或者写完文章之后我们需要把它们部署到GitHub上供人浏览。我们<code>依次</code>运行下面的两条命令完成：</p><blockquote><p>hexo clean</p><p>hexo d -g</p></blockquote></li><li><p>如果报错提示：<code>ERROR Deployer not found:</code>，那么我们需要安装<code>deployer</code>插件，运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ul><p>三、更换Yilia主题及它的基本配置</p><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>之前说过的，我们可以将下载好的主题文件放在<code>themes</code>文件夹里进行主题更换。<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">这里</a>提供了很多别人开发好的主题，我使用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia主题</a>。下面具体说说怎么更换：</p><ul><li><p>在<code>themes</code>文件夹下打开Git Bash，运行<code>git clone git@github.com:litten/hexo-theme-yilia.git</code>。</p></li><li><p>打开<code>blog</code>文件夹下的<code>_config.yml</code>文件，将其中的<code>theme</code>属性的值改为刚刚下好的文件名即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-yilia</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-基本配置-1"><a href="#2-基本配置-1" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><h4 id="2-1-更换头像和站点图标"><a href="#2-1-更换头像和站点图标" class="headerlink" title="2.1.更换头像和站点图标"></a>2.1.更换头像和站点图标</h4><ul><li><p>打开文件夹<code>themes\hexo-theme-yilia\source\img</code>，将头像、站点图标以及两个打赏二维码图片放在这里。</p><p><img src="/imgs/hexo/theme.JPG" alt></p></li><li><p>打开主题文件夹下的<code>_config.yml</code>文件，并对<code>avatar</code>和<code>favicon</code>做如下更改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.jpg</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/avatar.jpg</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-配置打赏图片"><a href="#2-2-配置打赏图片" class="headerlink" title="2.2.配置打赏图片"></a>2.2.配置打赏图片</h4><ul><li><p>还是对<code>_config.yml</code>文件进行修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置头像的方式一样</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/img/weixin.jpg</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-标签功能缺失模块的补充"><a href="#2-3-标签功能缺失模块的补充" class="headerlink" title="2.3.标签功能缺失模块的补充"></a>2.3.标签功能缺失模块的补充</h4><ul><li><p>在<code>blog</code>文件夹下执行命令：<code>npm i hexo-generator-json-content --save</code></p></li><li><p>在<code>blog</code>文件夹中的<code>_config.yml</code>文件末尾添加代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">    meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    posts:</span></span><br><span class="line"><span class="attr">      title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-百度统计设置"><a href="#2-4-百度统计设置" class="headerlink" title="2.4.百度统计设置"></a>2.4.百度统计设置</h4><p><a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计官网</a></p><ul><li><p>注册完之后点击新增网站，前面的两个值填写的是GitHub为我们生成的网址即可</p><p><img src="/imgs/hexo/bdtjnew.JPG" alt></p></li><li><p>在代码获取页面复制官方生成的代码</p><p><img src="/imgs/hexo/bdcode.JPG" alt></p></li><li><p>将复制的代码添加到目录<code>hexo-theme-yilia\layout\_partial</code>中的baidu_tongji.ejs中，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.baidu_tongji) &#123; %&gt;</span><br><span class="line"># 你刚复制的所有代码</span><br></pre></td></tr></table></figure></li><li><p>打开主题目录下的<code>_config.yml</code>文件，将其中的<code>baidu_analytics</code>的值修改为统计代码中<code>hm.src</code>值的’<strong>?</strong>‘之后一段字符。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">'0f94e44d75ef0e72600xxxxxxxxxxxxx'</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5-其他一些链接更改"><a href="#2-5-其他一些链接更改" class="headerlink" title="2.5.其他一些链接更改"></a>2.5.其他一些链接更改</h4><ul><li><p>这里主要是我对主题里一些链接的更改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SubNav</span></span><br><span class="line"><span class="attr">subnav:</span></span><br><span class="line"><span class="attr">  github:</span> <span class="string">"https://github.com/Perry961002"</span></span><br><span class="line"><span class="attr">  weibo:</span> <span class="string">"#"</span></span><br><span class="line"><span class="attr">  rss:</span> <span class="string">"#"</span></span><br><span class="line"><span class="attr">  mail:</span> <span class="string">"mailto:Perry961002@163.com"</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">#友情链接</span></span><br><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="string">Github官网:</span> <span class="attr">https://github.com/</span></span><br><span class="line">  <span class="string">Markdown编辑器Typora:</span> <span class="attr">https://www.typora.io/</span></span><br><span class="line">  <span class="string">阿里云:</span> <span class="attr">https://www.aliyun.com/</span></span><br><span class="line">  <span class="string">VSCode官网:</span> <span class="attr">https://code.visualstudio.com/</span></span><br><span class="line">  <span class="string">LeetCode中国:</span> <span class="attr">https://leetcode-cn.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自我展示</span></span><br><span class="line"><span class="attr">aboutme:</span> <span class="string">爱好数学和算法的码农&lt;br&gt;&lt;br&gt;喜欢乒乓球的吃货。。。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、博客进阶功能设置"><a href="#四、博客进阶功能设置" class="headerlink" title="四、博客进阶功能设置"></a>四、博客进阶功能设置</h2><h3 id="1-网站访问量和文章阅读量统计"><a href="#1-网站访问量和文章阅读量统计" class="headerlink" title="1.网站访问量和文章阅读量统计"></a>1.网站访问量和文章阅读量统计</h3><ul><li><p>这里我使用的是<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>提供的插件</p></li><li><p>打开目录<code>hexo-theme-yilia\layout\_partial</code>下的<code>footer.ejs</code>文件，在末尾添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>还是在<code>footer.ejs</code>文件中，在<code>footer-left</code>和<code>footer-right</code>标签之间添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开同目录下的<code>article.ejs</code>文件，在<code>&lt;%- partial(&#39;post/title&#39;, {class_name: &#39;article-title&#39;}) %&gt;</code>一行下添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 显示阅读和评论数 --&gt;</span><br><span class="line">&lt;% if (!index)&#123; %&gt;</span><br><span class="line">  &lt;br/&gt;</span><br><span class="line">  &lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">            本文阅读量: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>效果：</p><p>网站访问量：</p><p><img src="/imgs/hexo/footer.JPG" alt></p><p>文章阅读量：</p><p><img src="/imgs/hexo/article.JPG" alt></p></li></ul><h3 id="2-评论功能配置"><a href="#2-评论功能配置" class="headerlink" title="2.评论功能配置"></a>2.评论功能配置</h3><ul><li><p>在主题目录下的<code>_config.yml</code>文件中我们发现作者提供了多种方式来实现评论功能，但因为一些原因很多方式已经不能使用，这里我采用了<code>Gitment</code>评论功能。</p></li><li><p>Gitment是使用的GitHub Issues<strong>作为评论系统</strong>。</p></li></ul><h4 id="2-1-在GitHub上创建OAuth-Apps"><a href="#2-1-在GitHub上创建OAuth-Apps" class="headerlink" title="2.1.在GitHub上创建OAuth Apps"></a>2.1.在GitHub上创建OAuth Apps</h4><ul><li><p>登录自己的Github，进入<code>Settings--Developer settings</code>页面，点击<code>New OAuth App</code></p><p><img src="/imgs/hexo/oauth.JPG" alt></p><ul><li><p>这里<code>name</code>可以随便写，<code>Homepage URL</code>填GitHub提供的网址</p></li><li><p>如果博客绑定的域名，callback URL就需要使用绑定域名，否则和上面一样，最后确定即可。</p></li></ul><p>完成之后可以得到</p><p><img src="/imgs/hexo/client.JPG" alt></p></li></ul><h4 id="2-2-配置-config-yml文件"><a href="#2-2-配置-config-yml文件" class="headerlink" title="2.2.配置_config.yml文件"></a>2.2.配置_config.yml文件</h4><ul><li><p>打开主题目录下的<code>_config.yml</code>文件，做下面的修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5、Gitment</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">gitment_owner:</span> <span class="string">Perry961002</span>      <span class="comment">#你的 GitHub ID</span></span><br><span class="line"><span class="attr">gitment_repo:</span> <span class="string">'perry961002.github.io'</span>          <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="attr">gitment_oauth:</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">'e686axxxxxxxxx'</span>           <span class="comment">#client ID</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">'aea668xxxxxxxxxx'</span>       <span class="comment">#client secret</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-配置Gitment的中文显示、解决Validation-Failed错误"><a href="#2-3-配置Gitment的中文显示、解决Validation-Failed错误" class="headerlink" title="2.3.配置Gitment的中文显示、解决Validation Failed错误"></a>2.3.配置Gitment的中文显示、解决Validation Failed错误</h4><ul><li><p>打开目录<code>hexo-theme-yilia\layout\_partial\post</code>下的<code>gitment.ejs</code>文件，将2、3两行修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>将id属性的值修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id: &quot;&lt;%= page.date %&gt;&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h4><p><img src="/imgs/hexo/gitment.JPG" alt></p><h3 id="3-文章目录功能"><a href="#3-文章目录功能" class="headerlink" title="3.文章目录功能"></a>3.文章目录功能</h3><ul><li><p>打开目录<code>hexo-theme-yilia\source</code>下的<code>main.0cf68a.css</code>文件(这里文件名中间的那一段编号可能不一样)，添加下面的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 新添加的 */</span></span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.show-toc-btn</span>,<span class="selector-id">#container</span> <span class="selector-class">.toc-article</span>&#123;<span class="attribute">display</span>:block&#125;</span><br><span class="line"><span class="selector-class">.toc-article</span>&#123;<span class="attribute">z-index</span>:<span class="number">100</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">max-width</span>:<span class="number">250px</span>;<span class="attribute">min-width</span>:<span class="number">150px</span>;<span class="attribute">max-height</span>:<span class="number">500px</span>;<span class="attribute">overflow-y</span>:auto;<span class="attribute">-webkit-box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">35px</span>;<span class="attribute">top</span>:<span class="number">129px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">font-size</span>:<span class="number">20px</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">float</span>:right;<span class="attribute">color</span>:<span class="number">#ccc</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-number</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-text</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;<span class="attribute">color</span>:<span class="number">#2a6496</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:none&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-level-1</span>&#123;<span class="attribute">margin</span>:<span class="number">4px</span> <span class="number">0</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-child</span>&#123;&#125;@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;<span class="selector-class">.show-toc-btn</span>&#123;<span class="attribute">display</span>:none;<span class="attribute">z-index</span>:<span class="number">10</span>;<span class="attribute">width</span>:<span class="number">30px</span>;<span class="attribute">min-height</span>:<span class="number">14px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">6px</span> <span class="number">8px</span> <span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-right</span>:none;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">40px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">background-color</span>:<span class="number">#f9f9f9</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">margin-top</span>:<span class="number">2px</span>;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">14px</span>;<span class="attribute">background</span>:<span class="built_in">url</span>(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;<span class="attribute">-webkit-background-size</span>:<span class="number">100%</span>;<span class="attribute">-moz-background-size</span>:<span class="number">100%</span>;<span class="attribute">background-size</span>:<span class="number">100%</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">cursor</span>:pointer&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">background-position</span>:<span class="number">0</span> -<span class="number">16px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">color</span>:<span class="number">#ea8010</span>&#125;</span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开目录<code>hexo-theme-yilia\layout\_partial</code>下的<code>article.ejs</code>文件，在<code>&lt;/header&gt; &lt;% } %&gt;</code>下添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 目录内容 --&gt;</span><br><span class="line">&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt;</span><br><span class="line">    &lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;btn-bg&quot;&gt;&lt;/span&gt;</span><br><span class="line">          &lt;span class=&quot;btn-text&quot;&gt;文章导航&lt;/span&gt;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">    &lt;span id=&quot;toc-close&quot; class=&quot;toc-close&quot; title=&quot;隐藏导航&quot; onclick=&quot;showBtn();&quot;&gt;×&lt;/span&gt;</span><br><span class="line">&lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt;</span><br><span class="line">           &lt;%- toc(post.content) %&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function showToc()&#123;</span><br><span class="line">var toc_article = document.getElementById(&quot;toc-article&quot;);</span><br><span class="line">var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);</span><br><span class="line">toc_article.setAttribute(&quot;style&quot;,&quot;display:block&quot;);</span><br><span class="line">show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:none&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">function showBtn()&#123;</span><br><span class="line">var toc_article = document.getElementById(&quot;toc-article&quot;);</span><br><span class="line">var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);</span><br><span class="line">toc_article.setAttribute(&quot;style&quot;,&quot;display:none&quot;);</span><br><span class="line">show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:block&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">&lt;!-- 目录内容结束 --&gt;</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是：如果想在页面中显示目录，要在文章的Markdown的开头加入<code>toc: true</code>这样一句话。</p></li></ul><p><strong>效果：</strong></p><p><img src="/imgs/hexo/toc.JPG" alt></p><h2 id="五、绑定域名"><a href="#五、绑定域名" class="headerlink" title="五、绑定域名"></a>五、绑定域名</h2><h3 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1.购买域名"></a>1.购买域名</h3><ul><li>首先需要在<a href="https://aliyun.com" target="_blank" rel="noopener">阿里云</a>的域名模块购买属于自己的域名，我这里使用的是<code>.com</code>结尾的域名，加入云解析服务，第一年支付了<code>73.36人民币</code>。</li></ul><h3 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h3><ul><li>点开解析设置页面，添加两个记录，<code>记录类型</code>选<code>CNAME</code>，<code>主机记录</code>分别写<code>@</code>和<code>www</code>，<code>记录值</code>填GitHub生成的网址</li><li>在博客目录下的<code>source</code>文件夹下新建名为<code>CNAME</code>的文件，将域名信息写入并保存，比如我的就是填<code>perry96.com</code>。稍等几分钟之后就可以通过访问域名来访问自己的博客。</li></ul><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前面几天时间利用Github和Hexo搭建Yilia主题的博客，过程中也踩了很多的坑，现在也到了填坑的时候了。&lt;/p&gt;
&lt;p&gt;废话不多说，现在正式开始教程吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Yilia" scheme="http://yoursite.com/tags/Yilia/"/>
    
  </entry>
  
  <entry>
    <title>Git和Github初次使用及配置</title>
    <link href="http://yoursite.com/2019/02/21/git-github/"/>
    <id>http://yoursite.com/2019/02/21/git-github/</id>
    <published>2019-02-21T03:26:58.000Z</published>
    <updated>2019-03-14T18:05:23.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简单介绍"><a href="#一、简单介绍" class="headerlink" title="一、简单介绍"></a>一、简单介绍</h2><ul><li><p>Git是一个开源的分布式版本控制系统，它可以很高效地进行项目版本管理。</p></li><li><p>Github是一个只支持Git作为唯一版本管理工具的面向开源和私有软件项目的托管平台。</p></li></ul><a id="more"></a><h2 id="二、Git安装及本地账户配置"><a href="#二、Git安装及本地账户配置" class="headerlink" title="二、Git安装及本地账户配置"></a>二、Git安装及本地账户配置</h2><h3 id="1-Git安装"><a href="#1-Git安装" class="headerlink" title="1.Git安装"></a>1.Git安装</h3><ul><li>我们需要从<a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">Git官网</a>下载适合版本的安装包进行安装，因为过程中没有需要注意的地方，这里不再赘诉。</li></ul><h3 id="2-Git的账户配置"><a href="#2-Git的账户配置" class="headerlink" title="2.Git的账户配置"></a>2.Git的账户配置</h3><ul><li><p>我们右击鼠标，打开<code>Git Bash</code>，输入下面两条命令进行<code>用户名</code>和<code>邮箱</code>设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span>              //引号内为GitHub用户名</span><br><span class="line">git config --global user.email useremail@example.com   //这里用GitHub的注册邮箱</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、配置SSH访问Github"><a href="#三、配置SSH访问Github" class="headerlink" title="三、配置SSH访问Github"></a>三、配置SSH访问Github</h2><ul><li>这里需要你提前注册一个Github账号，方法不再赘述。</li></ul><h3 id="1-Git创建本地SSH-Key"><a href="#1-Git创建本地SSH-Key" class="headerlink" title="1.Git创建本地SSH Key"></a>1.Git创建本地SSH Key</h3><ul><li><p>右键鼠标，打开<code>Git Bash</code>，输入下面的命令创建本地SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"useremail@example.com"</span>   //此处“C”要大写，邮箱使用GitHub注册邮箱</span><br></pre></td></tr></table></figure><p>输入后中间会提示选择生产路径以及设置密码，为了后面使用方便我们一路回车跳过即可 </p></li><li><p>创建成功之后会看见<code>The key&#39;s randomart image is:</code>这样一句话，下面会显示出一堆看不懂的图案。</p></li><li><p>之后我们打开<code>.ssh</code>文件夹中的<code>id_rsa.pub</code>文件，复制其中的所有内容，这里一定要全部复制，包括换行。</p></li></ul><h3 id="2-添加到Github"><a href="#2-添加到Github" class="headerlink" title="2.添加到Github"></a>2.添加到Github</h3><ul><li><p>登录Github，点击<code>Settings</code>—-<code>SSH and GPG keys</code>—-<code>New SSH key</code></p><p><img src="/imgs/sshkey.JPG" alt></p></li><li><p><code>Title</code>里的内容随便填，<code>Key</code>中粘贴之前复制的本地SSH key。</p></li></ul><h3 id="3-测试是否成功"><a href="#3-测试是否成功" class="headerlink" title="3.测试是否成功"></a>3.测试是否成功</h3><ul><li><p>打开<code>Git Bash</code>，输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功将会出现下面的文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p><a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/3.0/cn/88x31.png"></a><br>本<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" rel="dct:type">文章</span>由<a xmlns:cc="https://creativecommons.org/ns#" href="https://perry96.com" property="cc:attributionName" rel="noopener" target="_blank">Perry</a>创作，采用<a rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank">知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议</a>进行许可。凡是转载的文章，翻译的文章，或者由其他作者投稿的文章，版权归原作者所有。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简单介绍&quot;&gt;&lt;a href=&quot;#一、简单介绍&quot; class=&quot;headerlink&quot; title=&quot;一、简单介绍&quot;&gt;&lt;/a&gt;一、简单介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git是一个开源的分布式版本控制系统，它可以很高效地进行项目版本管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Github是一个只支持Git作为唯一版本管理工具的面向开源和私有软件项目的托管平台。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
</feed>
